
ADC_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000011b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000011b4  00001228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000014f4  00000000  00000000  00001238  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000007a9  00000000  00000000  0000272c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 eb       	ldi	r30, 0xB4	; 180
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 66 08 	call	0x10cc	; 0x10cc <main>
      7a:	0c 94 d8 08 	jmp	0x11b0	; 0x11b0 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_Init>:
#include "ADC_Interface.h"
#include "ADC_Private.h"
#include "ADC_Config.h"

void ADC_Init()
{
      82:	df 93       	push	r29
      84:	cf 93       	push	r28
      86:	cd b7       	in	r28, 0x3d	; 61
      88:	de b7       	in	r29, 0x3e	; 62
	ADC_ADMUX	= VOLT_REF ;
      8a:	e7 e2       	ldi	r30, 0x27	; 39
      8c:	f0 e0       	ldi	r31, 0x00	; 0
      8e:	80 e4       	ldi	r24, 0x40	; 64
      90:	80 83       	st	Z, r24
	CLR_BIT(ADC_ADMUX,5);
      92:	a7 e2       	ldi	r26, 0x27	; 39
      94:	b0 e0       	ldi	r27, 0x00	; 0
      96:	e7 e2       	ldi	r30, 0x27	; 39
      98:	f0 e0       	ldi	r31, 0x00	; 0
      9a:	80 81       	ld	r24, Z
      9c:	8f 7d       	andi	r24, 0xDF	; 223
      9e:	8c 93       	st	X, r24
	SET_BIT(ADC_ADCSRA,ADC_PRESCALER);
      a0:	a6 e2       	ldi	r26, 0x26	; 38
      a2:	b0 e0       	ldi	r27, 0x00	; 0
      a4:	e6 e2       	ldi	r30, 0x26	; 38
      a6:	f0 e0       	ldi	r31, 0x00	; 0
      a8:	80 81       	ld	r24, Z
      aa:	80 68       	ori	r24, 0x80	; 128
      ac:	8c 93       	st	X, r24
	ADC_ADCSRA	|= ADC_Enable ;	// Enable + Prescal
      ae:	a6 e2       	ldi	r26, 0x26	; 38
      b0:	b0 e0       	ldi	r27, 0x00	; 0
      b2:	e6 e2       	ldi	r30, 0x26	; 38
      b4:	f0 e0       	ldi	r31, 0x00	; 0
      b6:	80 81       	ld	r24, Z
      b8:	80 68       	ori	r24, 0x80	; 128
      ba:	8c 93       	st	X, r24

}
      bc:	cf 91       	pop	r28
      be:	df 91       	pop	r29
      c0:	08 95       	ret

000000c2 <ADC_Read>:


uint16_t ADC_Read(uint8_t Channel)
{
      c2:	df 93       	push	r29
      c4:	cf 93       	push	r28
      c6:	00 d0       	rcall	.+0      	; 0xc8 <ADC_Read+0x6>
      c8:	00 d0       	rcall	.+0      	; 0xca <ADC_Read+0x8>
      ca:	0f 92       	push	r0
      cc:	cd b7       	in	r28, 0x3d	; 61
      ce:	de b7       	in	r29, 0x3e	; 62
      d0:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t ADC_Low,ADC_Hight;
	uint16_t ADC_Value;
	ADC_ADMUX = ADC_ADMUX | (Channel & 0x0f);	/* Set input channel to read */
      d2:	a7 e2       	ldi	r26, 0x27	; 39
      d4:	b0 e0       	ldi	r27, 0x00	; 0
      d6:	e7 e2       	ldi	r30, 0x27	; 39
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	98 2f       	mov	r25, r24
      de:	8d 81       	ldd	r24, Y+5	; 0x05
      e0:	8f 70       	andi	r24, 0x0F	; 15
      e2:	89 2b       	or	r24, r25
      e4:	8c 93       	st	X, r24
	ADC_ADCSRA |= (1<<ADSC);					/* Start conversion */
      e6:	a6 e2       	ldi	r26, 0x26	; 38
      e8:	b0 e0       	ldi	r27, 0x00	; 0
      ea:	e6 e2       	ldi	r30, 0x26	; 38
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	80 81       	ld	r24, Z
      f0:	80 64       	ori	r24, 0x40	; 64
      f2:	8c 93       	st	X, r24

	while((GET_BIT(ADC_ADCSRA,ADIF))==0);
      f4:	e6 e2       	ldi	r30, 0x26	; 38
      f6:	f0 e0       	ldi	r31, 0x00	; 0
      f8:	80 81       	ld	r24, Z
      fa:	82 95       	swap	r24
      fc:	8f 70       	andi	r24, 0x0F	; 15
      fe:	88 2f       	mov	r24, r24
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	81 70       	andi	r24, 0x01	; 1
     104:	90 70       	andi	r25, 0x00	; 0
     106:	00 97       	sbiw	r24, 0x00	; 0
     108:	a9 f3       	breq	.-22     	; 0xf4 <ADC_Read+0x32>
	SET_BIT(ADC_ADCSRA,ADIF);
     10a:	a6 e2       	ldi	r26, 0x26	; 38
     10c:	b0 e0       	ldi	r27, 0x00	; 0
     10e:	e6 e2       	ldi	r30, 0x26	; 38
     110:	f0 e0       	ldi	r31, 0x00	; 0
     112:	80 81       	ld	r24, Z
     114:	80 61       	ori	r24, 0x10	; 16
     116:	8c 93       	st	X, r24
	ADC_Low = ADC_ADCL;
     118:	e4 e2       	ldi	r30, 0x24	; 36
     11a:	f0 e0       	ldi	r31, 0x00	; 0
     11c:	80 81       	ld	r24, Z
     11e:	91 81       	ldd	r25, Z+1	; 0x01
     120:	8c 83       	std	Y+4, r24	; 0x04
	ADC_Hight = ADC_ADCH;
     122:	e5 e2       	ldi	r30, 0x25	; 37
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	80 81       	ld	r24, Z
     128:	8b 83       	std	Y+3, r24	; 0x03
	//ADC_Value = (uint32_t)ADC_ADCH*256;
	ADC_Value = (uint16_t)ADC_Low + (((uint16_t)ADC_Hight)*256);
     12a:	8c 81       	ldd	r24, Y+4	; 0x04
     12c:	28 2f       	mov	r18, r24
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	8b 81       	ldd	r24, Y+3	; 0x03
     132:	88 2f       	mov	r24, r24
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	98 2f       	mov	r25, r24
     138:	88 27       	eor	r24, r24
     13a:	82 0f       	add	r24, r18
     13c:	93 1f       	adc	r25, r19
     13e:	9a 83       	std	Y+2, r25	; 0x02
     140:	89 83       	std	Y+1, r24	; 0x01

	return ADC_Value;
     142:	89 81       	ldd	r24, Y+1	; 0x01
     144:	9a 81       	ldd	r25, Y+2	; 0x02

}
     146:	0f 90       	pop	r0
     148:	0f 90       	pop	r0
     14a:	0f 90       	pop	r0
     14c:	0f 90       	pop	r0
     14e:	0f 90       	pop	r0
     150:	cf 91       	pop	r28
     152:	df 91       	pop	r29
     154:	08 95       	ret

00000156 <DIO_SetPinDircection>:
 * Set Pin direction from any port
 * INPUT : PORT name , PIN number , (OUTPUT or INPUT)
 * OUTPUT: 1 if ok and -1 if not ok
 **********************************************************************/
sint8_t DIO_SetPinDircection(uint8_t PORT , uint8_t PIN , uint8_t Mode)
{
     156:	df 93       	push	r29
     158:	cf 93       	push	r28
     15a:	cd b7       	in	r28, 0x3d	; 61
     15c:	de b7       	in	r29, 0x3e	; 62
     15e:	2a 97       	sbiw	r28, 0x0a	; 10
     160:	0f b6       	in	r0, 0x3f	; 63
     162:	f8 94       	cli
     164:	de bf       	out	0x3e, r29	; 62
     166:	0f be       	out	0x3f, r0	; 63
     168:	cd bf       	out	0x3d, r28	; 61
     16a:	89 83       	std	Y+1, r24	; 0x01
     16c:	6a 83       	std	Y+2, r22	; 0x02
     16e:	4b 83       	std	Y+3, r20	; 0x03
	if(PIN >7)
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	88 30       	cpi	r24, 0x08	; 8
     174:	18 f0       	brcs	.+6      	; 0x17c <DIO_SetPinDircection+0x26>
	{
		return -1;
     176:	2f ef       	ldi	r18, 0xFF	; 255
     178:	2a 87       	std	Y+10, r18	; 0x0a
     17a:	d1 c1       	rjmp	.+930    	; 0x51e <DIO_SetPinDircection+0x3c8>
	}
	else
	{
		if(Mode == OUTPUT)
     17c:	8b 81       	ldd	r24, Y+3	; 0x03
     17e:	81 30       	cpi	r24, 0x01	; 1
     180:	09 f0       	breq	.+2      	; 0x184 <DIO_SetPinDircection+0x2e>
     182:	7b c0       	rjmp	.+246    	; 0x27a <DIO_SetPinDircection+0x124>
		{
			switch(PORT)
     184:	89 81       	ldd	r24, Y+1	; 0x01
     186:	28 2f       	mov	r18, r24
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	39 87       	std	Y+9, r19	; 0x09
     18c:	28 87       	std	Y+8, r18	; 0x08
     18e:	88 85       	ldd	r24, Y+8	; 0x08
     190:	99 85       	ldd	r25, Y+9	; 0x09
     192:	82 30       	cpi	r24, 0x02	; 2
     194:	91 05       	cpc	r25, r1
     196:	69 f1       	breq	.+90     	; 0x1f2 <DIO_SetPinDircection+0x9c>
     198:	28 85       	ldd	r18, Y+8	; 0x08
     19a:	39 85       	ldd	r19, Y+9	; 0x09
     19c:	23 30       	cpi	r18, 0x03	; 3
     19e:	31 05       	cpc	r19, r1
     1a0:	34 f4       	brge	.+12     	; 0x1ae <DIO_SetPinDircection+0x58>
     1a2:	88 85       	ldd	r24, Y+8	; 0x08
     1a4:	99 85       	ldd	r25, Y+9	; 0x09
     1a6:	81 30       	cpi	r24, 0x01	; 1
     1a8:	91 05       	cpc	r25, r1
     1aa:	69 f0       	breq	.+26     	; 0x1c6 <DIO_SetPinDircection+0x70>
     1ac:	63 c0       	rjmp	.+198    	; 0x274 <DIO_SetPinDircection+0x11e>
     1ae:	28 85       	ldd	r18, Y+8	; 0x08
     1b0:	39 85       	ldd	r19, Y+9	; 0x09
     1b2:	23 30       	cpi	r18, 0x03	; 3
     1b4:	31 05       	cpc	r19, r1
     1b6:	91 f1       	breq	.+100    	; 0x21c <DIO_SetPinDircection+0xc6>
     1b8:	88 85       	ldd	r24, Y+8	; 0x08
     1ba:	99 85       	ldd	r25, Y+9	; 0x09
     1bc:	84 30       	cpi	r24, 0x04	; 4
     1be:	91 05       	cpc	r25, r1
     1c0:	09 f4       	brne	.+2      	; 0x1c4 <DIO_SetPinDircection+0x6e>
     1c2:	42 c0       	rjmp	.+132    	; 0x248 <DIO_SetPinDircection+0xf2>
     1c4:	57 c0       	rjmp	.+174    	; 0x274 <DIO_SetPinDircection+0x11e>
					{
					case PORTA:
						SET_BIT(DIO_DDRA,PIN);
     1c6:	aa e3       	ldi	r26, 0x3A	; 58
     1c8:	b0 e0       	ldi	r27, 0x00	; 0
     1ca:	ea e3       	ldi	r30, 0x3A	; 58
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	80 81       	ld	r24, Z
     1d0:	48 2f       	mov	r20, r24
     1d2:	8a 81       	ldd	r24, Y+2	; 0x02
     1d4:	28 2f       	mov	r18, r24
     1d6:	30 e0       	ldi	r19, 0x00	; 0
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	02 2e       	mov	r0, r18
     1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_SetPinDircection+0x8e>
     1e0:	88 0f       	add	r24, r24
     1e2:	99 1f       	adc	r25, r25
     1e4:	0a 94       	dec	r0
     1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_SetPinDircection+0x8a>
     1e8:	84 2b       	or	r24, r20
     1ea:	8c 93       	st	X, r24
						return 1;
     1ec:	91 e0       	ldi	r25, 0x01	; 1
     1ee:	9a 87       	std	Y+10, r25	; 0x0a
     1f0:	96 c1       	rjmp	.+812    	; 0x51e <DIO_SetPinDircection+0x3c8>
						break;
					case PORTB:
						SET_BIT(DIO_DDRB,PIN);
     1f2:	a7 e3       	ldi	r26, 0x37	; 55
     1f4:	b0 e0       	ldi	r27, 0x00	; 0
     1f6:	e7 e3       	ldi	r30, 0x37	; 55
     1f8:	f0 e0       	ldi	r31, 0x00	; 0
     1fa:	80 81       	ld	r24, Z
     1fc:	48 2f       	mov	r20, r24
     1fe:	8a 81       	ldd	r24, Y+2	; 0x02
     200:	28 2f       	mov	r18, r24
     202:	30 e0       	ldi	r19, 0x00	; 0
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_SetPinDircection+0xb8>
     20a:	88 0f       	add	r24, r24
     20c:	99 1f       	adc	r25, r25
     20e:	2a 95       	dec	r18
     210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_SetPinDircection+0xb4>
     212:	84 2b       	or	r24, r20
     214:	8c 93       	st	X, r24
						return 1;
     216:	21 e0       	ldi	r18, 0x01	; 1
     218:	2a 87       	std	Y+10, r18	; 0x0a
     21a:	81 c1       	rjmp	.+770    	; 0x51e <DIO_SetPinDircection+0x3c8>
						break;
					case PORTC:
						SET_BIT(DIO_DDRC,PIN);
     21c:	a4 e3       	ldi	r26, 0x34	; 52
     21e:	b0 e0       	ldi	r27, 0x00	; 0
     220:	e4 e3       	ldi	r30, 0x34	; 52
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	80 81       	ld	r24, Z
     226:	48 2f       	mov	r20, r24
     228:	8a 81       	ldd	r24, Y+2	; 0x02
     22a:	28 2f       	mov	r18, r24
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	02 2e       	mov	r0, r18
     234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_SetPinDircection+0xe4>
     236:	88 0f       	add	r24, r24
     238:	99 1f       	adc	r25, r25
     23a:	0a 94       	dec	r0
     23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_SetPinDircection+0xe0>
     23e:	84 2b       	or	r24, r20
     240:	8c 93       	st	X, r24
						return 1;
     242:	31 e0       	ldi	r19, 0x01	; 1
     244:	3a 87       	std	Y+10, r19	; 0x0a
     246:	6b c1       	rjmp	.+726    	; 0x51e <DIO_SetPinDircection+0x3c8>
						break;
					case PORTD:
						SET_BIT(DIO_DDRD,PIN);
     248:	a1 e3       	ldi	r26, 0x31	; 49
     24a:	b0 e0       	ldi	r27, 0x00	; 0
     24c:	e1 e3       	ldi	r30, 0x31	; 49
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	80 81       	ld	r24, Z
     252:	48 2f       	mov	r20, r24
     254:	8a 81       	ldd	r24, Y+2	; 0x02
     256:	28 2f       	mov	r18, r24
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	02 2e       	mov	r0, r18
     260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_SetPinDircection+0x110>
     262:	88 0f       	add	r24, r24
     264:	99 1f       	adc	r25, r25
     266:	0a 94       	dec	r0
     268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_SetPinDircection+0x10c>
     26a:	84 2b       	or	r24, r20
     26c:	8c 93       	st	X, r24
						return 1;
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	8a 87       	std	Y+10, r24	; 0x0a
     272:	55 c1       	rjmp	.+682    	; 0x51e <DIO_SetPinDircection+0x3c8>
						break;
					default:
						return -2;
     274:	9e ef       	ldi	r25, 0xFE	; 254
     276:	9a 87       	std	Y+10, r25	; 0x0a
     278:	52 c1       	rjmp	.+676    	; 0x51e <DIO_SetPinDircection+0x3c8>
					}
		}
		else if( Mode == INPUT)
     27a:	8b 81       	ldd	r24, Y+3	; 0x03
     27c:	88 23       	and	r24, r24
     27e:	09 f0       	breq	.+2      	; 0x282 <DIO_SetPinDircection+0x12c>
     280:	7f c0       	rjmp	.+254    	; 0x380 <DIO_SetPinDircection+0x22a>
			{
			switch(PORT)
     282:	89 81       	ldd	r24, Y+1	; 0x01
     284:	28 2f       	mov	r18, r24
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	3f 83       	std	Y+7, r19	; 0x07
     28a:	2e 83       	std	Y+6, r18	; 0x06
     28c:	8e 81       	ldd	r24, Y+6	; 0x06
     28e:	9f 81       	ldd	r25, Y+7	; 0x07
     290:	82 30       	cpi	r24, 0x02	; 2
     292:	91 05       	cpc	r25, r1
     294:	71 f1       	breq	.+92     	; 0x2f2 <DIO_SetPinDircection+0x19c>
     296:	2e 81       	ldd	r18, Y+6	; 0x06
     298:	3f 81       	ldd	r19, Y+7	; 0x07
     29a:	23 30       	cpi	r18, 0x03	; 3
     29c:	31 05       	cpc	r19, r1
     29e:	34 f4       	brge	.+12     	; 0x2ac <DIO_SetPinDircection+0x156>
     2a0:	8e 81       	ldd	r24, Y+6	; 0x06
     2a2:	9f 81       	ldd	r25, Y+7	; 0x07
     2a4:	81 30       	cpi	r24, 0x01	; 1
     2a6:	91 05       	cpc	r25, r1
     2a8:	69 f0       	breq	.+26     	; 0x2c4 <DIO_SetPinDircection+0x16e>
     2aa:	67 c0       	rjmp	.+206    	; 0x37a <DIO_SetPinDircection+0x224>
     2ac:	2e 81       	ldd	r18, Y+6	; 0x06
     2ae:	3f 81       	ldd	r19, Y+7	; 0x07
     2b0:	23 30       	cpi	r18, 0x03	; 3
     2b2:	31 05       	cpc	r19, r1
     2b4:	a1 f1       	breq	.+104    	; 0x31e <DIO_SetPinDircection+0x1c8>
     2b6:	8e 81       	ldd	r24, Y+6	; 0x06
     2b8:	9f 81       	ldd	r25, Y+7	; 0x07
     2ba:	84 30       	cpi	r24, 0x04	; 4
     2bc:	91 05       	cpc	r25, r1
     2be:	09 f4       	brne	.+2      	; 0x2c2 <DIO_SetPinDircection+0x16c>
     2c0:	45 c0       	rjmp	.+138    	; 0x34c <DIO_SetPinDircection+0x1f6>
     2c2:	5b c0       	rjmp	.+182    	; 0x37a <DIO_SetPinDircection+0x224>
				{
			case PORTA:
				CLR_BIT(DIO_DDRA,PIN);
     2c4:	aa e3       	ldi	r26, 0x3A	; 58
     2c6:	b0 e0       	ldi	r27, 0x00	; 0
     2c8:	ea e3       	ldi	r30, 0x3A	; 58
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	80 81       	ld	r24, Z
     2ce:	48 2f       	mov	r20, r24
     2d0:	8a 81       	ldd	r24, Y+2	; 0x02
     2d2:	28 2f       	mov	r18, r24
     2d4:	30 e0       	ldi	r19, 0x00	; 0
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	02 2e       	mov	r0, r18
     2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_SetPinDircection+0x18c>
     2de:	88 0f       	add	r24, r24
     2e0:	99 1f       	adc	r25, r25
     2e2:	0a 94       	dec	r0
     2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_SetPinDircection+0x188>
     2e6:	80 95       	com	r24
     2e8:	84 23       	and	r24, r20
     2ea:	8c 93       	st	X, r24
					return 1;
     2ec:	91 e0       	ldi	r25, 0x01	; 1
     2ee:	9a 87       	std	Y+10, r25	; 0x0a
     2f0:	16 c1       	rjmp	.+556    	; 0x51e <DIO_SetPinDircection+0x3c8>
					break;
			case PORTB:
				CLR_BIT(DIO_DDRB,PIN);
     2f2:	a7 e3       	ldi	r26, 0x37	; 55
     2f4:	b0 e0       	ldi	r27, 0x00	; 0
     2f6:	e7 e3       	ldi	r30, 0x37	; 55
     2f8:	f0 e0       	ldi	r31, 0x00	; 0
     2fa:	80 81       	ld	r24, Z
     2fc:	48 2f       	mov	r20, r24
     2fe:	8a 81       	ldd	r24, Y+2	; 0x02
     300:	28 2f       	mov	r18, r24
     302:	30 e0       	ldi	r19, 0x00	; 0
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_SetPinDircection+0x1b8>
     30a:	88 0f       	add	r24, r24
     30c:	99 1f       	adc	r25, r25
     30e:	2a 95       	dec	r18
     310:	e2 f7       	brpl	.-8      	; 0x30a <DIO_SetPinDircection+0x1b4>
     312:	80 95       	com	r24
     314:	84 23       	and	r24, r20
     316:	8c 93       	st	X, r24
					return 1;
     318:	21 e0       	ldi	r18, 0x01	; 1
     31a:	2a 87       	std	Y+10, r18	; 0x0a
     31c:	00 c1       	rjmp	.+512    	; 0x51e <DIO_SetPinDircection+0x3c8>
					break;
			case PORTC:
				CLR_BIT(DIO_DDRC,PIN);
     31e:	a4 e3       	ldi	r26, 0x34	; 52
     320:	b0 e0       	ldi	r27, 0x00	; 0
     322:	e4 e3       	ldi	r30, 0x34	; 52
     324:	f0 e0       	ldi	r31, 0x00	; 0
     326:	80 81       	ld	r24, Z
     328:	48 2f       	mov	r20, r24
     32a:	8a 81       	ldd	r24, Y+2	; 0x02
     32c:	28 2f       	mov	r18, r24
     32e:	30 e0       	ldi	r19, 0x00	; 0
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	02 2e       	mov	r0, r18
     336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_SetPinDircection+0x1e6>
     338:	88 0f       	add	r24, r24
     33a:	99 1f       	adc	r25, r25
     33c:	0a 94       	dec	r0
     33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_SetPinDircection+0x1e2>
     340:	80 95       	com	r24
     342:	84 23       	and	r24, r20
     344:	8c 93       	st	X, r24
					return 1;
     346:	31 e0       	ldi	r19, 0x01	; 1
     348:	3a 87       	std	Y+10, r19	; 0x0a
     34a:	e9 c0       	rjmp	.+466    	; 0x51e <DIO_SetPinDircection+0x3c8>
					break;
			case PORTD:
				CLR_BIT(DIO_DDRD,PIN);
     34c:	a1 e3       	ldi	r26, 0x31	; 49
     34e:	b0 e0       	ldi	r27, 0x00	; 0
     350:	e1 e3       	ldi	r30, 0x31	; 49
     352:	f0 e0       	ldi	r31, 0x00	; 0
     354:	80 81       	ld	r24, Z
     356:	48 2f       	mov	r20, r24
     358:	8a 81       	ldd	r24, Y+2	; 0x02
     35a:	28 2f       	mov	r18, r24
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	02 2e       	mov	r0, r18
     364:	02 c0       	rjmp	.+4      	; 0x36a <DIO_SetPinDircection+0x214>
     366:	88 0f       	add	r24, r24
     368:	99 1f       	adc	r25, r25
     36a:	0a 94       	dec	r0
     36c:	e2 f7       	brpl	.-8      	; 0x366 <DIO_SetPinDircection+0x210>
     36e:	80 95       	com	r24
     370:	84 23       	and	r24, r20
     372:	8c 93       	st	X, r24
					return 1;
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	8a 87       	std	Y+10, r24	; 0x0a
     378:	d2 c0       	rjmp	.+420    	; 0x51e <DIO_SetPinDircection+0x3c8>
					break;
			default:
					return -2;
     37a:	9e ef       	ldi	r25, 0xFE	; 254
     37c:	9a 87       	std	Y+10, r25	; 0x0a
     37e:	cf c0       	rjmp	.+414    	; 0x51e <DIO_SetPinDircection+0x3c8>
				}
			}
		else if (Mode == INPUT_PULLUP)
     380:	8b 81       	ldd	r24, Y+3	; 0x03
     382:	82 30       	cpi	r24, 0x02	; 2
     384:	09 f0       	breq	.+2      	; 0x388 <DIO_SetPinDircection+0x232>
     386:	c9 c0       	rjmp	.+402    	; 0x51a <DIO_SetPinDircection+0x3c4>
		{
			switch(PORT)
     388:	89 81       	ldd	r24, Y+1	; 0x01
     38a:	28 2f       	mov	r18, r24
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	3d 83       	std	Y+5, r19	; 0x05
     390:	2c 83       	std	Y+4, r18	; 0x04
     392:	8c 81       	ldd	r24, Y+4	; 0x04
     394:	9d 81       	ldd	r25, Y+5	; 0x05
     396:	82 30       	cpi	r24, 0x02	; 2
     398:	91 05       	cpc	r25, r1
     39a:	09 f4       	brne	.+2      	; 0x39e <DIO_SetPinDircection+0x248>
     39c:	41 c0       	rjmp	.+130    	; 0x420 <DIO_SetPinDircection+0x2ca>
     39e:	2c 81       	ldd	r18, Y+4	; 0x04
     3a0:	3d 81       	ldd	r19, Y+5	; 0x05
     3a2:	23 30       	cpi	r18, 0x03	; 3
     3a4:	31 05       	cpc	r19, r1
     3a6:	34 f4       	brge	.+12     	; 0x3b4 <DIO_SetPinDircection+0x25e>
     3a8:	8c 81       	ldd	r24, Y+4	; 0x04
     3aa:	9d 81       	ldd	r25, Y+5	; 0x05
     3ac:	81 30       	cpi	r24, 0x01	; 1
     3ae:	91 05       	cpc	r25, r1
     3b0:	71 f0       	breq	.+28     	; 0x3ce <DIO_SetPinDircection+0x278>
     3b2:	b0 c0       	rjmp	.+352    	; 0x514 <DIO_SetPinDircection+0x3be>
     3b4:	2c 81       	ldd	r18, Y+4	; 0x04
     3b6:	3d 81       	ldd	r19, Y+5	; 0x05
     3b8:	23 30       	cpi	r18, 0x03	; 3
     3ba:	31 05       	cpc	r19, r1
     3bc:	09 f4       	brne	.+2      	; 0x3c0 <DIO_SetPinDircection+0x26a>
     3be:	58 c0       	rjmp	.+176    	; 0x470 <DIO_SetPinDircection+0x31a>
     3c0:	8c 81       	ldd	r24, Y+4	; 0x04
     3c2:	9d 81       	ldd	r25, Y+5	; 0x05
     3c4:	84 30       	cpi	r24, 0x04	; 4
     3c6:	91 05       	cpc	r25, r1
     3c8:	09 f4       	brne	.+2      	; 0x3cc <DIO_SetPinDircection+0x276>
     3ca:	7b c0       	rjmp	.+246    	; 0x4c2 <DIO_SetPinDircection+0x36c>
     3cc:	a3 c0       	rjmp	.+326    	; 0x514 <DIO_SetPinDircection+0x3be>
							{
						case PORTA:
							CLR_BIT(DIO_DDRA,PIN);
     3ce:	aa e3       	ldi	r26, 0x3A	; 58
     3d0:	b0 e0       	ldi	r27, 0x00	; 0
     3d2:	ea e3       	ldi	r30, 0x3A	; 58
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	80 81       	ld	r24, Z
     3d8:	48 2f       	mov	r20, r24
     3da:	8a 81       	ldd	r24, Y+2	; 0x02
     3dc:	28 2f       	mov	r18, r24
     3de:	30 e0       	ldi	r19, 0x00	; 0
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_SetPinDircection+0x294>
     3e6:	88 0f       	add	r24, r24
     3e8:	99 1f       	adc	r25, r25
     3ea:	2a 95       	dec	r18
     3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_SetPinDircection+0x290>
     3ee:	80 95       	com	r24
     3f0:	84 23       	and	r24, r20
     3f2:	8c 93       	st	X, r24
							SET_BIT(DIO_PORTA,PIN);
     3f4:	ab e3       	ldi	r26, 0x3B	; 59
     3f6:	b0 e0       	ldi	r27, 0x00	; 0
     3f8:	eb e3       	ldi	r30, 0x3B	; 59
     3fa:	f0 e0       	ldi	r31, 0x00	; 0
     3fc:	80 81       	ld	r24, Z
     3fe:	48 2f       	mov	r20, r24
     400:	8a 81       	ldd	r24, Y+2	; 0x02
     402:	28 2f       	mov	r18, r24
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	02 2e       	mov	r0, r18
     40c:	02 c0       	rjmp	.+4      	; 0x412 <DIO_SetPinDircection+0x2bc>
     40e:	88 0f       	add	r24, r24
     410:	99 1f       	adc	r25, r25
     412:	0a 94       	dec	r0
     414:	e2 f7       	brpl	.-8      	; 0x40e <DIO_SetPinDircection+0x2b8>
     416:	84 2b       	or	r24, r20
     418:	8c 93       	st	X, r24
								return 1;
     41a:	91 e0       	ldi	r25, 0x01	; 1
     41c:	9a 87       	std	Y+10, r25	; 0x0a
     41e:	7f c0       	rjmp	.+254    	; 0x51e <DIO_SetPinDircection+0x3c8>
								break;
						case PORTB:
							CLR_BIT(DIO_DDRB,PIN);
     420:	a7 e3       	ldi	r26, 0x37	; 55
     422:	b0 e0       	ldi	r27, 0x00	; 0
     424:	e7 e3       	ldi	r30, 0x37	; 55
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	80 81       	ld	r24, Z
     42a:	48 2f       	mov	r20, r24
     42c:	8a 81       	ldd	r24, Y+2	; 0x02
     42e:	28 2f       	mov	r18, r24
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	02 c0       	rjmp	.+4      	; 0x43c <DIO_SetPinDircection+0x2e6>
     438:	88 0f       	add	r24, r24
     43a:	99 1f       	adc	r25, r25
     43c:	2a 95       	dec	r18
     43e:	e2 f7       	brpl	.-8      	; 0x438 <DIO_SetPinDircection+0x2e2>
     440:	80 95       	com	r24
     442:	84 23       	and	r24, r20
     444:	8c 93       	st	X, r24
							SET_BIT(DIO_PORTB,PIN);
     446:	a8 e3       	ldi	r26, 0x38	; 56
     448:	b0 e0       	ldi	r27, 0x00	; 0
     44a:	e8 e3       	ldi	r30, 0x38	; 56
     44c:	f0 e0       	ldi	r31, 0x00	; 0
     44e:	80 81       	ld	r24, Z
     450:	48 2f       	mov	r20, r24
     452:	8a 81       	ldd	r24, Y+2	; 0x02
     454:	28 2f       	mov	r18, r24
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	02 c0       	rjmp	.+4      	; 0x462 <DIO_SetPinDircection+0x30c>
     45e:	88 0f       	add	r24, r24
     460:	99 1f       	adc	r25, r25
     462:	2a 95       	dec	r18
     464:	e2 f7       	brpl	.-8      	; 0x45e <DIO_SetPinDircection+0x308>
     466:	84 2b       	or	r24, r20
     468:	8c 93       	st	X, r24
								return 1;
     46a:	21 e0       	ldi	r18, 0x01	; 1
     46c:	2a 87       	std	Y+10, r18	; 0x0a
     46e:	57 c0       	rjmp	.+174    	; 0x51e <DIO_SetPinDircection+0x3c8>
								break;
						case PORTC:
							CLR_BIT(DIO_DDRC,PIN);
     470:	a4 e3       	ldi	r26, 0x34	; 52
     472:	b0 e0       	ldi	r27, 0x00	; 0
     474:	e4 e3       	ldi	r30, 0x34	; 52
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	80 81       	ld	r24, Z
     47a:	48 2f       	mov	r20, r24
     47c:	8a 81       	ldd	r24, Y+2	; 0x02
     47e:	28 2f       	mov	r18, r24
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	02 c0       	rjmp	.+4      	; 0x48c <DIO_SetPinDircection+0x336>
     488:	88 0f       	add	r24, r24
     48a:	99 1f       	adc	r25, r25
     48c:	2a 95       	dec	r18
     48e:	e2 f7       	brpl	.-8      	; 0x488 <DIO_SetPinDircection+0x332>
     490:	80 95       	com	r24
     492:	84 23       	and	r24, r20
     494:	8c 93       	st	X, r24
							SET_BIT(DIO_PORTC,PIN);
     496:	a5 e3       	ldi	r26, 0x35	; 53
     498:	b0 e0       	ldi	r27, 0x00	; 0
     49a:	e5 e3       	ldi	r30, 0x35	; 53
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	80 81       	ld	r24, Z
     4a0:	48 2f       	mov	r20, r24
     4a2:	8a 81       	ldd	r24, Y+2	; 0x02
     4a4:	28 2f       	mov	r18, r24
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	02 2e       	mov	r0, r18
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_SetPinDircection+0x35e>
     4b0:	88 0f       	add	r24, r24
     4b2:	99 1f       	adc	r25, r25
     4b4:	0a 94       	dec	r0
     4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_SetPinDircection+0x35a>
     4b8:	84 2b       	or	r24, r20
     4ba:	8c 93       	st	X, r24
								return 1;
     4bc:	31 e0       	ldi	r19, 0x01	; 1
     4be:	3a 87       	std	Y+10, r19	; 0x0a
     4c0:	2e c0       	rjmp	.+92     	; 0x51e <DIO_SetPinDircection+0x3c8>
								break;
						case PORTD:
							CLR_BIT(DIO_DDRD,PIN);
     4c2:	a1 e3       	ldi	r26, 0x31	; 49
     4c4:	b0 e0       	ldi	r27, 0x00	; 0
     4c6:	e1 e3       	ldi	r30, 0x31	; 49
     4c8:	f0 e0       	ldi	r31, 0x00	; 0
     4ca:	80 81       	ld	r24, Z
     4cc:	48 2f       	mov	r20, r24
     4ce:	8a 81       	ldd	r24, Y+2	; 0x02
     4d0:	28 2f       	mov	r18, r24
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	02 c0       	rjmp	.+4      	; 0x4de <DIO_SetPinDircection+0x388>
     4da:	88 0f       	add	r24, r24
     4dc:	99 1f       	adc	r25, r25
     4de:	2a 95       	dec	r18
     4e0:	e2 f7       	brpl	.-8      	; 0x4da <DIO_SetPinDircection+0x384>
     4e2:	80 95       	com	r24
     4e4:	84 23       	and	r24, r20
     4e6:	8c 93       	st	X, r24
							SET_BIT(DIO_PORTD,PIN);
     4e8:	a2 e3       	ldi	r26, 0x32	; 50
     4ea:	b0 e0       	ldi	r27, 0x00	; 0
     4ec:	e2 e3       	ldi	r30, 0x32	; 50
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
     4f0:	80 81       	ld	r24, Z
     4f2:	48 2f       	mov	r20, r24
     4f4:	8a 81       	ldd	r24, Y+2	; 0x02
     4f6:	28 2f       	mov	r18, r24
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	02 2e       	mov	r0, r18
     500:	02 c0       	rjmp	.+4      	; 0x506 <DIO_SetPinDircection+0x3b0>
     502:	88 0f       	add	r24, r24
     504:	99 1f       	adc	r25, r25
     506:	0a 94       	dec	r0
     508:	e2 f7       	brpl	.-8      	; 0x502 <DIO_SetPinDircection+0x3ac>
     50a:	84 2b       	or	r24, r20
     50c:	8c 93       	st	X, r24
								return 1;
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	8a 87       	std	Y+10, r24	; 0x0a
     512:	05 c0       	rjmp	.+10     	; 0x51e <DIO_SetPinDircection+0x3c8>
								break;
						default:
								return -2;
     514:	9e ef       	ldi	r25, 0xFE	; 254
     516:	9a 87       	std	Y+10, r25	; 0x0a
     518:	02 c0       	rjmp	.+4      	; 0x51e <DIO_SetPinDircection+0x3c8>
							}
		}
		else
		{
			return -3;
     51a:	2d ef       	ldi	r18, 0xFD	; 253
     51c:	2a 87       	std	Y+10, r18	; 0x0a
     51e:	8a 85       	ldd	r24, Y+10	; 0x0a
		}
	}
}
     520:	2a 96       	adiw	r28, 0x0a	; 10
     522:	0f b6       	in	r0, 0x3f	; 63
     524:	f8 94       	cli
     526:	de bf       	out	0x3e, r29	; 62
     528:	0f be       	out	0x3f, r0	; 63
     52a:	cd bf       	out	0x3d, r28	; 61
     52c:	cf 91       	pop	r28
     52e:	df 91       	pop	r29
     530:	08 95       	ret

00000532 <DIO_SetPortDirection>:
 * Set Port direction
 * INPUT : PORT name , (OUTPUT or INPUT)
 * OUTPUT: 1 if ok and -1 if not ok
 **********************************************************************/
sint8_t DIO_SetPortDirection(uint8_t PORT, uint8_t Mode)
{
     532:	df 93       	push	r29
     534:	cf 93       	push	r28
     536:	00 d0       	rcall	.+0      	; 0x538 <DIO_SetPortDirection+0x6>
     538:	00 d0       	rcall	.+0      	; 0x53a <DIO_SetPortDirection+0x8>
     53a:	0f 92       	push	r0
     53c:	cd b7       	in	r28, 0x3d	; 61
     53e:	de b7       	in	r29, 0x3e	; 62
     540:	89 83       	std	Y+1, r24	; 0x01
     542:	6a 83       	std	Y+2, r22	; 0x02
	switch(PORT)
     544:	89 81       	ldd	r24, Y+1	; 0x01
     546:	28 2f       	mov	r18, r24
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	3d 83       	std	Y+5, r19	; 0x05
     54c:	2c 83       	std	Y+4, r18	; 0x04
     54e:	8c 81       	ldd	r24, Y+4	; 0x04
     550:	9d 81       	ldd	r25, Y+5	; 0x05
     552:	82 30       	cpi	r24, 0x02	; 2
     554:	91 05       	cpc	r25, r1
     556:	69 f1       	breq	.+90     	; 0x5b2 <DIO_SetPortDirection+0x80>
     558:	2c 81       	ldd	r18, Y+4	; 0x04
     55a:	3d 81       	ldd	r19, Y+5	; 0x05
     55c:	23 30       	cpi	r18, 0x03	; 3
     55e:	31 05       	cpc	r19, r1
     560:	34 f4       	brge	.+12     	; 0x56e <DIO_SetPortDirection+0x3c>
     562:	8c 81       	ldd	r24, Y+4	; 0x04
     564:	9d 81       	ldd	r25, Y+5	; 0x05
     566:	81 30       	cpi	r24, 0x01	; 1
     568:	91 05       	cpc	r25, r1
     56a:	69 f0       	breq	.+26     	; 0x586 <DIO_SetPortDirection+0x54>
     56c:	64 c0       	rjmp	.+200    	; 0x636 <DIO_SetPortDirection+0x104>
     56e:	2c 81       	ldd	r18, Y+4	; 0x04
     570:	3d 81       	ldd	r19, Y+5	; 0x05
     572:	23 30       	cpi	r18, 0x03	; 3
     574:	31 05       	cpc	r19, r1
     576:	99 f1       	breq	.+102    	; 0x5de <DIO_SetPortDirection+0xac>
     578:	8c 81       	ldd	r24, Y+4	; 0x04
     57a:	9d 81       	ldd	r25, Y+5	; 0x05
     57c:	84 30       	cpi	r24, 0x04	; 4
     57e:	91 05       	cpc	r25, r1
     580:	09 f4       	brne	.+2      	; 0x584 <DIO_SetPortDirection+0x52>
     582:	43 c0       	rjmp	.+134    	; 0x60a <DIO_SetPortDirection+0xd8>
     584:	58 c0       	rjmp	.+176    	; 0x636 <DIO_SetPortDirection+0x104>
	{
	case PORTA:
		if(Mode == OUTPUT)
     586:	8a 81       	ldd	r24, Y+2	; 0x02
     588:	81 30       	cpi	r24, 0x01	; 1
     58a:	39 f4       	brne	.+14     	; 0x59a <DIO_SetPortDirection+0x68>
		{
			DIO_DDRA =0xff;
     58c:	ea e3       	ldi	r30, 0x3A	; 58
     58e:	f0 e0       	ldi	r31, 0x00	; 0
     590:	8f ef       	ldi	r24, 0xFF	; 255
     592:	80 83       	st	Z, r24
			return 1;
     594:	91 e0       	ldi	r25, 0x01	; 1
     596:	9b 83       	std	Y+3, r25	; 0x03
     598:	50 c0       	rjmp	.+160    	; 0x63a <DIO_SetPortDirection+0x108>
		}
		else if (Mode == INPUT)
     59a:	8a 81       	ldd	r24, Y+2	; 0x02
     59c:	88 23       	and	r24, r24
     59e:	31 f4       	brne	.+12     	; 0x5ac <DIO_SetPortDirection+0x7a>
		{
			DIO_DDRA = 0x00;
     5a0:	ea e3       	ldi	r30, 0x3A	; 58
     5a2:	f0 e0       	ldi	r31, 0x00	; 0
     5a4:	10 82       	st	Z, r1
			return 1;
     5a6:	21 e0       	ldi	r18, 0x01	; 1
     5a8:	2b 83       	std	Y+3, r18	; 0x03
     5aa:	47 c0       	rjmp	.+142    	; 0x63a <DIO_SetPortDirection+0x108>
		}
		else
			return -1;
     5ac:	3f ef       	ldi	r19, 0xFF	; 255
     5ae:	3b 83       	std	Y+3, r19	; 0x03
     5b0:	44 c0       	rjmp	.+136    	; 0x63a <DIO_SetPortDirection+0x108>
		break;
	case PORTB:
			if(Mode == OUTPUT)
     5b2:	8a 81       	ldd	r24, Y+2	; 0x02
     5b4:	81 30       	cpi	r24, 0x01	; 1
     5b6:	39 f4       	brne	.+14     	; 0x5c6 <DIO_SetPortDirection+0x94>
			{
				DIO_DDRB =0xff;
     5b8:	e7 e3       	ldi	r30, 0x37	; 55
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	8f ef       	ldi	r24, 0xFF	; 255
     5be:	80 83       	st	Z, r24
				return 1;
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	8b 83       	std	Y+3, r24	; 0x03
     5c4:	3a c0       	rjmp	.+116    	; 0x63a <DIO_SetPortDirection+0x108>
			}
			else if (Mode == INPUT)
     5c6:	8a 81       	ldd	r24, Y+2	; 0x02
     5c8:	88 23       	and	r24, r24
     5ca:	31 f4       	brne	.+12     	; 0x5d8 <DIO_SetPortDirection+0xa6>
			{
				DIO_DDRB = 0x00;
     5cc:	e7 e3       	ldi	r30, 0x37	; 55
     5ce:	f0 e0       	ldi	r31, 0x00	; 0
     5d0:	10 82       	st	Z, r1
				return 1;
     5d2:	91 e0       	ldi	r25, 0x01	; 1
     5d4:	9b 83       	std	Y+3, r25	; 0x03
     5d6:	31 c0       	rjmp	.+98     	; 0x63a <DIO_SetPortDirection+0x108>
			}
			else
				return -1;
     5d8:	2f ef       	ldi	r18, 0xFF	; 255
     5da:	2b 83       	std	Y+3, r18	; 0x03
     5dc:	2e c0       	rjmp	.+92     	; 0x63a <DIO_SetPortDirection+0x108>
			break;
	case PORTC:
			if(Mode == OUTPUT)
     5de:	8a 81       	ldd	r24, Y+2	; 0x02
     5e0:	81 30       	cpi	r24, 0x01	; 1
     5e2:	39 f4       	brne	.+14     	; 0x5f2 <DIO_SetPortDirection+0xc0>
			{
				DIO_DDRC =0xff;
     5e4:	e4 e3       	ldi	r30, 0x34	; 52
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	8f ef       	ldi	r24, 0xFF	; 255
     5ea:	80 83       	st	Z, r24
				return 1;
     5ec:	31 e0       	ldi	r19, 0x01	; 1
     5ee:	3b 83       	std	Y+3, r19	; 0x03
     5f0:	24 c0       	rjmp	.+72     	; 0x63a <DIO_SetPortDirection+0x108>
			}
			else if (Mode == INPUT)
     5f2:	8a 81       	ldd	r24, Y+2	; 0x02
     5f4:	88 23       	and	r24, r24
     5f6:	31 f4       	brne	.+12     	; 0x604 <DIO_SetPortDirection+0xd2>
			{
				DIO_DDRC = 0x00;
     5f8:	e4 e3       	ldi	r30, 0x34	; 52
     5fa:	f0 e0       	ldi	r31, 0x00	; 0
     5fc:	10 82       	st	Z, r1
				return 1;
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	8b 83       	std	Y+3, r24	; 0x03
     602:	1b c0       	rjmp	.+54     	; 0x63a <DIO_SetPortDirection+0x108>
			}
			else
				return -1;
     604:	9f ef       	ldi	r25, 0xFF	; 255
     606:	9b 83       	std	Y+3, r25	; 0x03
     608:	18 c0       	rjmp	.+48     	; 0x63a <DIO_SetPortDirection+0x108>
			break;
	case PORTD:
			if(Mode == OUTPUT)
     60a:	8a 81       	ldd	r24, Y+2	; 0x02
     60c:	81 30       	cpi	r24, 0x01	; 1
     60e:	39 f4       	brne	.+14     	; 0x61e <DIO_SetPortDirection+0xec>
			{
				DIO_DDRD =0xff;
     610:	e1 e3       	ldi	r30, 0x31	; 49
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	8f ef       	ldi	r24, 0xFF	; 255
     616:	80 83       	st	Z, r24
				return 1;
     618:	21 e0       	ldi	r18, 0x01	; 1
     61a:	2b 83       	std	Y+3, r18	; 0x03
     61c:	0e c0       	rjmp	.+28     	; 0x63a <DIO_SetPortDirection+0x108>
			}
			else if (Mode == INPUT)
     61e:	8a 81       	ldd	r24, Y+2	; 0x02
     620:	88 23       	and	r24, r24
     622:	31 f4       	brne	.+12     	; 0x630 <DIO_SetPortDirection+0xfe>
			{
				DIO_DDRD = 0x00;
     624:	e1 e3       	ldi	r30, 0x31	; 49
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	10 82       	st	Z, r1
				return 1;
     62a:	31 e0       	ldi	r19, 0x01	; 1
     62c:	3b 83       	std	Y+3, r19	; 0x03
     62e:	05 c0       	rjmp	.+10     	; 0x63a <DIO_SetPortDirection+0x108>
			}
			else
				return -1;
     630:	8f ef       	ldi	r24, 0xFF	; 255
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	02 c0       	rjmp	.+4      	; 0x63a <DIO_SetPortDirection+0x108>
			break;
	default:
			return -1;
     636:	9f ef       	ldi	r25, 0xFF	; 255
     638:	9b 83       	std	Y+3, r25	; 0x03
     63a:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	0f 90       	pop	r0
     642:	0f 90       	pop	r0
     644:	0f 90       	pop	r0
     646:	cf 91       	pop	r28
     648:	df 91       	pop	r29
     64a:	08 95       	ret

0000064c <DIO_SetPinValue>:
 * Set Pin value from any port
 * INPUT : PORT name , PIN number , value
 * OUTPUT: 1 if ok and -1 if not ok
 **********************************************************************/
sint8_t DIO_SetPinValue(uint8_t PORT , uint8_t PIN , uint8_t value)
{
     64c:	df 93       	push	r29
     64e:	cf 93       	push	r28
     650:	cd b7       	in	r28, 0x3d	; 61
     652:	de b7       	in	r29, 0x3e	; 62
     654:	28 97       	sbiw	r28, 0x08	; 8
     656:	0f b6       	in	r0, 0x3f	; 63
     658:	f8 94       	cli
     65a:	de bf       	out	0x3e, r29	; 62
     65c:	0f be       	out	0x3f, r0	; 63
     65e:	cd bf       	out	0x3d, r28	; 61
     660:	89 83       	std	Y+1, r24	; 0x01
     662:	6a 83       	std	Y+2, r22	; 0x02
     664:	4b 83       	std	Y+3, r20	; 0x03
	if(PIN >7)
     666:	8a 81       	ldd	r24, Y+2	; 0x02
     668:	88 30       	cpi	r24, 0x08	; 8
     66a:	18 f0       	brcs	.+6      	; 0x672 <DIO_SetPinValue+0x26>
		{
			return -1;
     66c:	2f ef       	ldi	r18, 0xFF	; 255
     66e:	28 87       	std	Y+8, r18	; 0x08
     670:	04 c1       	rjmp	.+520    	; 0x87a <__stack+0x1b>
		}
		else
		{
			if(value == HIGH)
     672:	8b 81       	ldd	r24, Y+3	; 0x03
     674:	81 30       	cpi	r24, 0x01	; 1
     676:	09 f0       	breq	.+2      	; 0x67a <DIO_SetPinValue+0x2e>
     678:	7b c0       	rjmp	.+246    	; 0x770 <DIO_SetPinValue+0x124>
			{
				switch(PORT)
     67a:	89 81       	ldd	r24, Y+1	; 0x01
     67c:	28 2f       	mov	r18, r24
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	3f 83       	std	Y+7, r19	; 0x07
     682:	2e 83       	std	Y+6, r18	; 0x06
     684:	8e 81       	ldd	r24, Y+6	; 0x06
     686:	9f 81       	ldd	r25, Y+7	; 0x07
     688:	82 30       	cpi	r24, 0x02	; 2
     68a:	91 05       	cpc	r25, r1
     68c:	69 f1       	breq	.+90     	; 0x6e8 <DIO_SetPinValue+0x9c>
     68e:	2e 81       	ldd	r18, Y+6	; 0x06
     690:	3f 81       	ldd	r19, Y+7	; 0x07
     692:	23 30       	cpi	r18, 0x03	; 3
     694:	31 05       	cpc	r19, r1
     696:	34 f4       	brge	.+12     	; 0x6a4 <DIO_SetPinValue+0x58>
     698:	8e 81       	ldd	r24, Y+6	; 0x06
     69a:	9f 81       	ldd	r25, Y+7	; 0x07
     69c:	81 30       	cpi	r24, 0x01	; 1
     69e:	91 05       	cpc	r25, r1
     6a0:	69 f0       	breq	.+26     	; 0x6bc <DIO_SetPinValue+0x70>
     6a2:	63 c0       	rjmp	.+198    	; 0x76a <DIO_SetPinValue+0x11e>
     6a4:	2e 81       	ldd	r18, Y+6	; 0x06
     6a6:	3f 81       	ldd	r19, Y+7	; 0x07
     6a8:	23 30       	cpi	r18, 0x03	; 3
     6aa:	31 05       	cpc	r19, r1
     6ac:	91 f1       	breq	.+100    	; 0x712 <DIO_SetPinValue+0xc6>
     6ae:	8e 81       	ldd	r24, Y+6	; 0x06
     6b0:	9f 81       	ldd	r25, Y+7	; 0x07
     6b2:	84 30       	cpi	r24, 0x04	; 4
     6b4:	91 05       	cpc	r25, r1
     6b6:	09 f4       	brne	.+2      	; 0x6ba <DIO_SetPinValue+0x6e>
     6b8:	42 c0       	rjmp	.+132    	; 0x73e <DIO_SetPinValue+0xf2>
     6ba:	57 c0       	rjmp	.+174    	; 0x76a <DIO_SetPinValue+0x11e>
						{
						case PORTA:
							SET_BIT(DIO_PORTA,PIN);
     6bc:	ab e3       	ldi	r26, 0x3B	; 59
     6be:	b0 e0       	ldi	r27, 0x00	; 0
     6c0:	eb e3       	ldi	r30, 0x3B	; 59
     6c2:	f0 e0       	ldi	r31, 0x00	; 0
     6c4:	80 81       	ld	r24, Z
     6c6:	48 2f       	mov	r20, r24
     6c8:	8a 81       	ldd	r24, Y+2	; 0x02
     6ca:	28 2f       	mov	r18, r24
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	02 2e       	mov	r0, r18
     6d4:	02 c0       	rjmp	.+4      	; 0x6da <DIO_SetPinValue+0x8e>
     6d6:	88 0f       	add	r24, r24
     6d8:	99 1f       	adc	r25, r25
     6da:	0a 94       	dec	r0
     6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <DIO_SetPinValue+0x8a>
     6de:	84 2b       	or	r24, r20
     6e0:	8c 93       	st	X, r24
							return 1;
     6e2:	91 e0       	ldi	r25, 0x01	; 1
     6e4:	98 87       	std	Y+8, r25	; 0x08
     6e6:	c9 c0       	rjmp	.+402    	; 0x87a <__stack+0x1b>
							break;
						case PORTB:
							SET_BIT(DIO_PORTB,PIN);
     6e8:	a8 e3       	ldi	r26, 0x38	; 56
     6ea:	b0 e0       	ldi	r27, 0x00	; 0
     6ec:	e8 e3       	ldi	r30, 0x38	; 56
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	80 81       	ld	r24, Z
     6f2:	48 2f       	mov	r20, r24
     6f4:	8a 81       	ldd	r24, Y+2	; 0x02
     6f6:	28 2f       	mov	r18, r24
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	02 c0       	rjmp	.+4      	; 0x704 <DIO_SetPinValue+0xb8>
     700:	88 0f       	add	r24, r24
     702:	99 1f       	adc	r25, r25
     704:	2a 95       	dec	r18
     706:	e2 f7       	brpl	.-8      	; 0x700 <DIO_SetPinValue+0xb4>
     708:	84 2b       	or	r24, r20
     70a:	8c 93       	st	X, r24
							return 1;
     70c:	21 e0       	ldi	r18, 0x01	; 1
     70e:	28 87       	std	Y+8, r18	; 0x08
     710:	b4 c0       	rjmp	.+360    	; 0x87a <__stack+0x1b>
							break;
						case PORTC:
							SET_BIT(DIO_PORTC,PIN);
     712:	a5 e3       	ldi	r26, 0x35	; 53
     714:	b0 e0       	ldi	r27, 0x00	; 0
     716:	e5 e3       	ldi	r30, 0x35	; 53
     718:	f0 e0       	ldi	r31, 0x00	; 0
     71a:	80 81       	ld	r24, Z
     71c:	48 2f       	mov	r20, r24
     71e:	8a 81       	ldd	r24, Y+2	; 0x02
     720:	28 2f       	mov	r18, r24
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	02 2e       	mov	r0, r18
     72a:	02 c0       	rjmp	.+4      	; 0x730 <DIO_SetPinValue+0xe4>
     72c:	88 0f       	add	r24, r24
     72e:	99 1f       	adc	r25, r25
     730:	0a 94       	dec	r0
     732:	e2 f7       	brpl	.-8      	; 0x72c <DIO_SetPinValue+0xe0>
     734:	84 2b       	or	r24, r20
     736:	8c 93       	st	X, r24
							return 1;
     738:	31 e0       	ldi	r19, 0x01	; 1
     73a:	38 87       	std	Y+8, r19	; 0x08
     73c:	9e c0       	rjmp	.+316    	; 0x87a <__stack+0x1b>
							break;
						case PORTD:
							SET_BIT(DIO_PORTD,PIN);
     73e:	a2 e3       	ldi	r26, 0x32	; 50
     740:	b0 e0       	ldi	r27, 0x00	; 0
     742:	e2 e3       	ldi	r30, 0x32	; 50
     744:	f0 e0       	ldi	r31, 0x00	; 0
     746:	80 81       	ld	r24, Z
     748:	48 2f       	mov	r20, r24
     74a:	8a 81       	ldd	r24, Y+2	; 0x02
     74c:	28 2f       	mov	r18, r24
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	02 2e       	mov	r0, r18
     756:	02 c0       	rjmp	.+4      	; 0x75c <DIO_SetPinValue+0x110>
     758:	88 0f       	add	r24, r24
     75a:	99 1f       	adc	r25, r25
     75c:	0a 94       	dec	r0
     75e:	e2 f7       	brpl	.-8      	; 0x758 <DIO_SetPinValue+0x10c>
     760:	84 2b       	or	r24, r20
     762:	8c 93       	st	X, r24
							return 1;
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	88 87       	std	Y+8, r24	; 0x08
     768:	88 c0       	rjmp	.+272    	; 0x87a <__stack+0x1b>
							break;
						default:
							return -2;
     76a:	9e ef       	ldi	r25, 0xFE	; 254
     76c:	98 87       	std	Y+8, r25	; 0x08
     76e:	85 c0       	rjmp	.+266    	; 0x87a <__stack+0x1b>
						}
			}
			else if( value == LOW)
     770:	8b 81       	ldd	r24, Y+3	; 0x03
     772:	88 23       	and	r24, r24
     774:	09 f0       	breq	.+2      	; 0x778 <DIO_SetPinValue+0x12c>
     776:	7f c0       	rjmp	.+254    	; 0x876 <__stack+0x17>
				{
				switch(PORT)
     778:	89 81       	ldd	r24, Y+1	; 0x01
     77a:	28 2f       	mov	r18, r24
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	3d 83       	std	Y+5, r19	; 0x05
     780:	2c 83       	std	Y+4, r18	; 0x04
     782:	8c 81       	ldd	r24, Y+4	; 0x04
     784:	9d 81       	ldd	r25, Y+5	; 0x05
     786:	82 30       	cpi	r24, 0x02	; 2
     788:	91 05       	cpc	r25, r1
     78a:	71 f1       	breq	.+92     	; 0x7e8 <DIO_SetPinValue+0x19c>
     78c:	2c 81       	ldd	r18, Y+4	; 0x04
     78e:	3d 81       	ldd	r19, Y+5	; 0x05
     790:	23 30       	cpi	r18, 0x03	; 3
     792:	31 05       	cpc	r19, r1
     794:	34 f4       	brge	.+12     	; 0x7a2 <DIO_SetPinValue+0x156>
     796:	8c 81       	ldd	r24, Y+4	; 0x04
     798:	9d 81       	ldd	r25, Y+5	; 0x05
     79a:	81 30       	cpi	r24, 0x01	; 1
     79c:	91 05       	cpc	r25, r1
     79e:	69 f0       	breq	.+26     	; 0x7ba <DIO_SetPinValue+0x16e>
     7a0:	67 c0       	rjmp	.+206    	; 0x870 <__stack+0x11>
     7a2:	2c 81       	ldd	r18, Y+4	; 0x04
     7a4:	3d 81       	ldd	r19, Y+5	; 0x05
     7a6:	23 30       	cpi	r18, 0x03	; 3
     7a8:	31 05       	cpc	r19, r1
     7aa:	a1 f1       	breq	.+104    	; 0x814 <DIO_SetPinValue+0x1c8>
     7ac:	8c 81       	ldd	r24, Y+4	; 0x04
     7ae:	9d 81       	ldd	r25, Y+5	; 0x05
     7b0:	84 30       	cpi	r24, 0x04	; 4
     7b2:	91 05       	cpc	r25, r1
     7b4:	09 f4       	brne	.+2      	; 0x7b8 <DIO_SetPinValue+0x16c>
     7b6:	45 c0       	rjmp	.+138    	; 0x842 <DIO_SetPinValue+0x1f6>
     7b8:	5b c0       	rjmp	.+182    	; 0x870 <__stack+0x11>
					{
				case PORTA:
					CLR_BIT(DIO_PORTA,PIN);
     7ba:	ab e3       	ldi	r26, 0x3B	; 59
     7bc:	b0 e0       	ldi	r27, 0x00	; 0
     7be:	eb e3       	ldi	r30, 0x3B	; 59
     7c0:	f0 e0       	ldi	r31, 0x00	; 0
     7c2:	80 81       	ld	r24, Z
     7c4:	48 2f       	mov	r20, r24
     7c6:	8a 81       	ldd	r24, Y+2	; 0x02
     7c8:	28 2f       	mov	r18, r24
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	02 2e       	mov	r0, r18
     7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <DIO_SetPinValue+0x18c>
     7d4:	88 0f       	add	r24, r24
     7d6:	99 1f       	adc	r25, r25
     7d8:	0a 94       	dec	r0
     7da:	e2 f7       	brpl	.-8      	; 0x7d4 <DIO_SetPinValue+0x188>
     7dc:	80 95       	com	r24
     7de:	84 23       	and	r24, r20
     7e0:	8c 93       	st	X, r24
						return 1;
     7e2:	91 e0       	ldi	r25, 0x01	; 1
     7e4:	98 87       	std	Y+8, r25	; 0x08
     7e6:	49 c0       	rjmp	.+146    	; 0x87a <__stack+0x1b>
						break;
				case PORTB:
					CLR_BIT(DIO_PORTB,PIN);
     7e8:	a8 e3       	ldi	r26, 0x38	; 56
     7ea:	b0 e0       	ldi	r27, 0x00	; 0
     7ec:	e8 e3       	ldi	r30, 0x38	; 56
     7ee:	f0 e0       	ldi	r31, 0x00	; 0
     7f0:	80 81       	ld	r24, Z
     7f2:	48 2f       	mov	r20, r24
     7f4:	8a 81       	ldd	r24, Y+2	; 0x02
     7f6:	28 2f       	mov	r18, r24
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	02 c0       	rjmp	.+4      	; 0x804 <DIO_SetPinValue+0x1b8>
     800:	88 0f       	add	r24, r24
     802:	99 1f       	adc	r25, r25
     804:	2a 95       	dec	r18
     806:	e2 f7       	brpl	.-8      	; 0x800 <DIO_SetPinValue+0x1b4>
     808:	80 95       	com	r24
     80a:	84 23       	and	r24, r20
     80c:	8c 93       	st	X, r24
						return 1;
     80e:	21 e0       	ldi	r18, 0x01	; 1
     810:	28 87       	std	Y+8, r18	; 0x08
     812:	33 c0       	rjmp	.+102    	; 0x87a <__stack+0x1b>
						break;
				case PORTC:
					CLR_BIT(DIO_PORTC,PIN);
     814:	a5 e3       	ldi	r26, 0x35	; 53
     816:	b0 e0       	ldi	r27, 0x00	; 0
     818:	e5 e3       	ldi	r30, 0x35	; 53
     81a:	f0 e0       	ldi	r31, 0x00	; 0
     81c:	80 81       	ld	r24, Z
     81e:	48 2f       	mov	r20, r24
     820:	8a 81       	ldd	r24, Y+2	; 0x02
     822:	28 2f       	mov	r18, r24
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	02 2e       	mov	r0, r18
     82c:	02 c0       	rjmp	.+4      	; 0x832 <DIO_SetPinValue+0x1e6>
     82e:	88 0f       	add	r24, r24
     830:	99 1f       	adc	r25, r25
     832:	0a 94       	dec	r0
     834:	e2 f7       	brpl	.-8      	; 0x82e <DIO_SetPinValue+0x1e2>
     836:	80 95       	com	r24
     838:	84 23       	and	r24, r20
     83a:	8c 93       	st	X, r24
						return 1;
     83c:	31 e0       	ldi	r19, 0x01	; 1
     83e:	38 87       	std	Y+8, r19	; 0x08
     840:	1c c0       	rjmp	.+56     	; 0x87a <__stack+0x1b>
						break;
				case PORTD:
					CLR_BIT(DIO_PORTD,PIN);
     842:	a2 e3       	ldi	r26, 0x32	; 50
     844:	b0 e0       	ldi	r27, 0x00	; 0
     846:	e2 e3       	ldi	r30, 0x32	; 50
     848:	f0 e0       	ldi	r31, 0x00	; 0
     84a:	80 81       	ld	r24, Z
     84c:	48 2f       	mov	r20, r24
     84e:	8a 81       	ldd	r24, Y+2	; 0x02
     850:	28 2f       	mov	r18, r24
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	02 2e       	mov	r0, r18
     85a:	02 c0       	rjmp	.+4      	; 0x860 <__stack+0x1>
     85c:	88 0f       	add	r24, r24
     85e:	99 1f       	adc	r25, r25
     860:	0a 94       	dec	r0
     862:	e2 f7       	brpl	.-8      	; 0x85c <DIO_SetPinValue+0x210>
     864:	80 95       	com	r24
     866:	84 23       	and	r24, r20
     868:	8c 93       	st	X, r24
						return 1;
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	88 87       	std	Y+8, r24	; 0x08
     86e:	05 c0       	rjmp	.+10     	; 0x87a <__stack+0x1b>
						break;
				default:
						return -2;
     870:	9e ef       	ldi	r25, 0xFE	; 254
     872:	98 87       	std	Y+8, r25	; 0x08
     874:	02 c0       	rjmp	.+4      	; 0x87a <__stack+0x1b>
					}
				}
			else
			{
				return -3;
     876:	2d ef       	ldi	r18, 0xFD	; 253
     878:	28 87       	std	Y+8, r18	; 0x08
     87a:	88 85       	ldd	r24, Y+8	; 0x08
			}
		}
}
     87c:	28 96       	adiw	r28, 0x08	; 8
     87e:	0f b6       	in	r0, 0x3f	; 63
     880:	f8 94       	cli
     882:	de bf       	out	0x3e, r29	; 62
     884:	0f be       	out	0x3f, r0	; 63
     886:	cd bf       	out	0x3d, r28	; 61
     888:	cf 91       	pop	r28
     88a:	df 91       	pop	r29
     88c:	08 95       	ret

0000088e <DIO_SetPortValue>:
 * Set port value
 * INPUT : PORT name  , value
 * OUTPUT: 1 if ok and -1 if not ok
 **********************************************************************/
sint8_t DIO_SetPortValue(uint8_t PORT , uint8_t value)
{
     88e:	df 93       	push	r29
     890:	cf 93       	push	r28
     892:	00 d0       	rcall	.+0      	; 0x894 <DIO_SetPortValue+0x6>
     894:	00 d0       	rcall	.+0      	; 0x896 <DIO_SetPortValue+0x8>
     896:	0f 92       	push	r0
     898:	cd b7       	in	r28, 0x3d	; 61
     89a:	de b7       	in	r29, 0x3e	; 62
     89c:	89 83       	std	Y+1, r24	; 0x01
     89e:	6a 83       	std	Y+2, r22	; 0x02
	switch(PORT)
     8a0:	89 81       	ldd	r24, Y+1	; 0x01
     8a2:	28 2f       	mov	r18, r24
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	3d 83       	std	Y+5, r19	; 0x05
     8a8:	2c 83       	std	Y+4, r18	; 0x04
     8aa:	8c 81       	ldd	r24, Y+4	; 0x04
     8ac:	9d 81       	ldd	r25, Y+5	; 0x05
     8ae:	82 30       	cpi	r24, 0x02	; 2
     8b0:	91 05       	cpc	r25, r1
     8b2:	e9 f0       	breq	.+58     	; 0x8ee <DIO_SetPortValue+0x60>
     8b4:	2c 81       	ldd	r18, Y+4	; 0x04
     8b6:	3d 81       	ldd	r19, Y+5	; 0x05
     8b8:	23 30       	cpi	r18, 0x03	; 3
     8ba:	31 05       	cpc	r19, r1
     8bc:	34 f4       	brge	.+12     	; 0x8ca <DIO_SetPortValue+0x3c>
     8be:	8c 81       	ldd	r24, Y+4	; 0x04
     8c0:	9d 81       	ldd	r25, Y+5	; 0x05
     8c2:	81 30       	cpi	r24, 0x01	; 1
     8c4:	91 05       	cpc	r25, r1
     8c6:	61 f0       	breq	.+24     	; 0x8e0 <DIO_SetPortValue+0x52>
     8c8:	27 c0       	rjmp	.+78     	; 0x918 <DIO_SetPortValue+0x8a>
     8ca:	2c 81       	ldd	r18, Y+4	; 0x04
     8cc:	3d 81       	ldd	r19, Y+5	; 0x05
     8ce:	23 30       	cpi	r18, 0x03	; 3
     8d0:	31 05       	cpc	r19, r1
     8d2:	a1 f0       	breq	.+40     	; 0x8fc <DIO_SetPortValue+0x6e>
     8d4:	8c 81       	ldd	r24, Y+4	; 0x04
     8d6:	9d 81       	ldd	r25, Y+5	; 0x05
     8d8:	84 30       	cpi	r24, 0x04	; 4
     8da:	91 05       	cpc	r25, r1
     8dc:	b1 f0       	breq	.+44     	; 0x90a <DIO_SetPortValue+0x7c>
     8de:	1c c0       	rjmp	.+56     	; 0x918 <DIO_SetPortValue+0x8a>
		{
		case PORTA:
			DIO_PORTA = value;
     8e0:	eb e3       	ldi	r30, 0x3B	; 59
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	8a 81       	ldd	r24, Y+2	; 0x02
     8e6:	80 83       	st	Z, r24
				return 1;
     8e8:	91 e0       	ldi	r25, 0x01	; 1
     8ea:	9b 83       	std	Y+3, r25	; 0x03
     8ec:	17 c0       	rjmp	.+46     	; 0x91c <DIO_SetPortValue+0x8e>
				break;
		case PORTB:
				DIO_PORTB = value;
     8ee:	e8 e3       	ldi	r30, 0x38	; 56
     8f0:	f0 e0       	ldi	r31, 0x00	; 0
     8f2:	8a 81       	ldd	r24, Y+2	; 0x02
     8f4:	80 83       	st	Z, r24
				return 1;
     8f6:	21 e0       	ldi	r18, 0x01	; 1
     8f8:	2b 83       	std	Y+3, r18	; 0x03
     8fa:	10 c0       	rjmp	.+32     	; 0x91c <DIO_SetPortValue+0x8e>
				break;
		case PORTC:
				DIO_PORTC = value;
     8fc:	e5 e3       	ldi	r30, 0x35	; 53
     8fe:	f0 e0       	ldi	r31, 0x00	; 0
     900:	8a 81       	ldd	r24, Y+2	; 0x02
     902:	80 83       	st	Z, r24
				return 1;
     904:	31 e0       	ldi	r19, 0x01	; 1
     906:	3b 83       	std	Y+3, r19	; 0x03
     908:	09 c0       	rjmp	.+18     	; 0x91c <DIO_SetPortValue+0x8e>
				break;
		case PORTD:
				DIO_PORTD = value;
     90a:	e2 e3       	ldi	r30, 0x32	; 50
     90c:	f0 e0       	ldi	r31, 0x00	; 0
     90e:	8a 81       	ldd	r24, Y+2	; 0x02
     910:	80 83       	st	Z, r24
				return 1;
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	8b 83       	std	Y+3, r24	; 0x03
     916:	02 c0       	rjmp	.+4      	; 0x91c <DIO_SetPortValue+0x8e>
				break;
		default:
				return -1;
     918:	9f ef       	ldi	r25, 0xFF	; 255
     91a:	9b 83       	std	Y+3, r25	; 0x03
     91c:	8b 81       	ldd	r24, Y+3	; 0x03
		}
}
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
     924:	0f 90       	pop	r0
     926:	0f 90       	pop	r0
     928:	cf 91       	pop	r28
     92a:	df 91       	pop	r29
     92c:	08 95       	ret

0000092e <DIO_GetPinVal>:
 * get Pin value from any port
 * INPUT : PORT name , PIN number , variable to store the data
 * OUTPUT: 1 if ok and -1 if not ok
 **********************************************************************/
sint8_t DIO_GetPinVal(uint8_t PORT , uint8_t PIN , uint8_t * val)
{
     92e:	df 93       	push	r29
     930:	cf 93       	push	r28
     932:	cd b7       	in	r28, 0x3d	; 61
     934:	de b7       	in	r29, 0x3e	; 62
     936:	27 97       	sbiw	r28, 0x07	; 7
     938:	0f b6       	in	r0, 0x3f	; 63
     93a:	f8 94       	cli
     93c:	de bf       	out	0x3e, r29	; 62
     93e:	0f be       	out	0x3f, r0	; 63
     940:	cd bf       	out	0x3d, r28	; 61
     942:	89 83       	std	Y+1, r24	; 0x01
     944:	6a 83       	std	Y+2, r22	; 0x02
     946:	5c 83       	std	Y+4, r21	; 0x04
     948:	4b 83       	std	Y+3, r20	; 0x03

	if(PIN >7)
     94a:	8a 81       	ldd	r24, Y+2	; 0x02
     94c:	88 30       	cpi	r24, 0x08	; 8
     94e:	18 f0       	brcs	.+6      	; 0x956 <DIO_GetPinVal+0x28>
			{
				return -1;
     950:	2f ef       	ldi	r18, 0xFF	; 255
     952:	2f 83       	std	Y+7, r18	; 0x07
     954:	7b c0       	rjmp	.+246    	; 0xa4c <DIO_GetPinVal+0x11e>
			}
			else
			{
					switch(PORT)
     956:	89 81       	ldd	r24, Y+1	; 0x01
     958:	48 2f       	mov	r20, r24
     95a:	50 e0       	ldi	r21, 0x00	; 0
     95c:	5e 83       	std	Y+6, r21	; 0x06
     95e:	4d 83       	std	Y+5, r20	; 0x05
     960:	8d 81       	ldd	r24, Y+5	; 0x05
     962:	9e 81       	ldd	r25, Y+6	; 0x06
     964:	82 30       	cpi	r24, 0x02	; 2
     966:	91 05       	cpc	r25, r1
     968:	69 f1       	breq	.+90     	; 0x9c4 <DIO_GetPinVal+0x96>
     96a:	2d 81       	ldd	r18, Y+5	; 0x05
     96c:	3e 81       	ldd	r19, Y+6	; 0x06
     96e:	23 30       	cpi	r18, 0x03	; 3
     970:	31 05       	cpc	r19, r1
     972:	34 f4       	brge	.+12     	; 0x980 <DIO_GetPinVal+0x52>
     974:	4d 81       	ldd	r20, Y+5	; 0x05
     976:	5e 81       	ldd	r21, Y+6	; 0x06
     978:	41 30       	cpi	r20, 0x01	; 1
     97a:	51 05       	cpc	r21, r1
     97c:	69 f0       	breq	.+26     	; 0x998 <DIO_GetPinVal+0x6a>
     97e:	64 c0       	rjmp	.+200    	; 0xa48 <DIO_GetPinVal+0x11a>
     980:	8d 81       	ldd	r24, Y+5	; 0x05
     982:	9e 81       	ldd	r25, Y+6	; 0x06
     984:	83 30       	cpi	r24, 0x03	; 3
     986:	91 05       	cpc	r25, r1
     988:	99 f1       	breq	.+102    	; 0x9f0 <DIO_GetPinVal+0xc2>
     98a:	2d 81       	ldd	r18, Y+5	; 0x05
     98c:	3e 81       	ldd	r19, Y+6	; 0x06
     98e:	24 30       	cpi	r18, 0x04	; 4
     990:	31 05       	cpc	r19, r1
     992:	09 f4       	brne	.+2      	; 0x996 <DIO_GetPinVal+0x68>
     994:	43 c0       	rjmp	.+134    	; 0xa1c <DIO_GetPinVal+0xee>
     996:	58 c0       	rjmp	.+176    	; 0xa48 <DIO_GetPinVal+0x11a>
							{
							case PORTA:
								*val =  GET_BIT(DIO_PINA,PIN);
     998:	e9 e3       	ldi	r30, 0x39	; 57
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	80 81       	ld	r24, Z
     99e:	28 2f       	mov	r18, r24
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	8a 81       	ldd	r24, Y+2	; 0x02
     9a4:	88 2f       	mov	r24, r24
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	a9 01       	movw	r20, r18
     9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <DIO_GetPinVal+0x82>
     9ac:	55 95       	asr	r21
     9ae:	47 95       	ror	r20
     9b0:	8a 95       	dec	r24
     9b2:	e2 f7       	brpl	.-8      	; 0x9ac <DIO_GetPinVal+0x7e>
     9b4:	ca 01       	movw	r24, r20
     9b6:	81 70       	andi	r24, 0x01	; 1
     9b8:	eb 81       	ldd	r30, Y+3	; 0x03
     9ba:	fc 81       	ldd	r31, Y+4	; 0x04
     9bc:	80 83       	st	Z, r24
								return 1;
     9be:	51 e0       	ldi	r21, 0x01	; 1
     9c0:	5f 83       	std	Y+7, r21	; 0x07
     9c2:	44 c0       	rjmp	.+136    	; 0xa4c <DIO_GetPinVal+0x11e>
								break;
							case PORTB:
								*val =  GET_BIT(DIO_PINB,PIN);
     9c4:	e6 e3       	ldi	r30, 0x36	; 54
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	80 81       	ld	r24, Z
     9ca:	28 2f       	mov	r18, r24
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	8a 81       	ldd	r24, Y+2	; 0x02
     9d0:	88 2f       	mov	r24, r24
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	a9 01       	movw	r20, r18
     9d6:	02 c0       	rjmp	.+4      	; 0x9dc <DIO_GetPinVal+0xae>
     9d8:	55 95       	asr	r21
     9da:	47 95       	ror	r20
     9dc:	8a 95       	dec	r24
     9de:	e2 f7       	brpl	.-8      	; 0x9d8 <DIO_GetPinVal+0xaa>
     9e0:	ca 01       	movw	r24, r20
     9e2:	81 70       	andi	r24, 0x01	; 1
     9e4:	eb 81       	ldd	r30, Y+3	; 0x03
     9e6:	fc 81       	ldd	r31, Y+4	; 0x04
     9e8:	80 83       	st	Z, r24
								return 1;
     9ea:	51 e0       	ldi	r21, 0x01	; 1
     9ec:	5f 83       	std	Y+7, r21	; 0x07
     9ee:	2e c0       	rjmp	.+92     	; 0xa4c <DIO_GetPinVal+0x11e>
								break;
							case PORTC:
								*val =  GET_BIT(DIO_PINC,PIN);
     9f0:	e3 e3       	ldi	r30, 0x33	; 51
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	80 81       	ld	r24, Z
     9f6:	28 2f       	mov	r18, r24
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	8a 81       	ldd	r24, Y+2	; 0x02
     9fc:	88 2f       	mov	r24, r24
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	a9 01       	movw	r20, r18
     a02:	02 c0       	rjmp	.+4      	; 0xa08 <DIO_GetPinVal+0xda>
     a04:	55 95       	asr	r21
     a06:	47 95       	ror	r20
     a08:	8a 95       	dec	r24
     a0a:	e2 f7       	brpl	.-8      	; 0xa04 <DIO_GetPinVal+0xd6>
     a0c:	ca 01       	movw	r24, r20
     a0e:	81 70       	andi	r24, 0x01	; 1
     a10:	eb 81       	ldd	r30, Y+3	; 0x03
     a12:	fc 81       	ldd	r31, Y+4	; 0x04
     a14:	80 83       	st	Z, r24
								return 1;
     a16:	51 e0       	ldi	r21, 0x01	; 1
     a18:	5f 83       	std	Y+7, r21	; 0x07
     a1a:	18 c0       	rjmp	.+48     	; 0xa4c <DIO_GetPinVal+0x11e>
								break;
							case PORTD:
								*val =  GET_BIT(DIO_PIND,PIN);
     a1c:	e0 e3       	ldi	r30, 0x30	; 48
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	80 81       	ld	r24, Z
     a22:	28 2f       	mov	r18, r24
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	8a 81       	ldd	r24, Y+2	; 0x02
     a28:	88 2f       	mov	r24, r24
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	a9 01       	movw	r20, r18
     a2e:	02 c0       	rjmp	.+4      	; 0xa34 <DIO_GetPinVal+0x106>
     a30:	55 95       	asr	r21
     a32:	47 95       	ror	r20
     a34:	8a 95       	dec	r24
     a36:	e2 f7       	brpl	.-8      	; 0xa30 <DIO_GetPinVal+0x102>
     a38:	ca 01       	movw	r24, r20
     a3a:	81 70       	andi	r24, 0x01	; 1
     a3c:	eb 81       	ldd	r30, Y+3	; 0x03
     a3e:	fc 81       	ldd	r31, Y+4	; 0x04
     a40:	80 83       	st	Z, r24
								return 1;
     a42:	51 e0       	ldi	r21, 0x01	; 1
     a44:	5f 83       	std	Y+7, r21	; 0x07
     a46:	02 c0       	rjmp	.+4      	; 0xa4c <DIO_GetPinVal+0x11e>
								break;
							default:
								return -2;
     a48:	8e ef       	ldi	r24, 0xFE	; 254
     a4a:	8f 83       	std	Y+7, r24	; 0x07
     a4c:	8f 81       	ldd	r24, Y+7	; 0x07
							}
			}
}
     a4e:	27 96       	adiw	r28, 0x07	; 7
     a50:	0f b6       	in	r0, 0x3f	; 63
     a52:	f8 94       	cli
     a54:	de bf       	out	0x3e, r29	; 62
     a56:	0f be       	out	0x3f, r0	; 63
     a58:	cd bf       	out	0x3d, r28	; 61
     a5a:	cf 91       	pop	r28
     a5c:	df 91       	pop	r29
     a5e:	08 95       	ret

00000a60 <DIO_GetPortValue>:

/*
NOT TESTED YET
*/
sint8_t DIO_GetPortValue(uint8_t PORT , uint8_t * val)
{
     a60:	df 93       	push	r29
     a62:	cf 93       	push	r28
     a64:	00 d0       	rcall	.+0      	; 0xa66 <DIO_GetPortValue+0x6>
     a66:	00 d0       	rcall	.+0      	; 0xa68 <DIO_GetPortValue+0x8>
     a68:	00 d0       	rcall	.+0      	; 0xa6a <DIO_GetPortValue+0xa>
     a6a:	cd b7       	in	r28, 0x3d	; 61
     a6c:	de b7       	in	r29, 0x3e	; 62
     a6e:	89 83       	std	Y+1, r24	; 0x01
     a70:	7b 83       	std	Y+3, r23	; 0x03
     a72:	6a 83       	std	Y+2, r22	; 0x02
	switch(PORT)
     a74:	89 81       	ldd	r24, Y+1	; 0x01
     a76:	28 2f       	mov	r18, r24
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	3e 83       	std	Y+6, r19	; 0x06
     a7c:	2d 83       	std	Y+5, r18	; 0x05
     a7e:	8d 81       	ldd	r24, Y+5	; 0x05
     a80:	9e 81       	ldd	r25, Y+6	; 0x06
     a82:	82 30       	cpi	r24, 0x02	; 2
     a84:	91 05       	cpc	r25, r1
     a86:	f9 f0       	breq	.+62     	; 0xac6 <DIO_GetPortValue+0x66>
     a88:	2d 81       	ldd	r18, Y+5	; 0x05
     a8a:	3e 81       	ldd	r19, Y+6	; 0x06
     a8c:	23 30       	cpi	r18, 0x03	; 3
     a8e:	31 05       	cpc	r19, r1
     a90:	34 f4       	brge	.+12     	; 0xa9e <DIO_GetPortValue+0x3e>
     a92:	8d 81       	ldd	r24, Y+5	; 0x05
     a94:	9e 81       	ldd	r25, Y+6	; 0x06
     a96:	81 30       	cpi	r24, 0x01	; 1
     a98:	91 05       	cpc	r25, r1
     a9a:	61 f0       	breq	.+24     	; 0xab4 <DIO_GetPortValue+0x54>
     a9c:	2f c0       	rjmp	.+94     	; 0xafc <DIO_GetPortValue+0x9c>
     a9e:	2d 81       	ldd	r18, Y+5	; 0x05
     aa0:	3e 81       	ldd	r19, Y+6	; 0x06
     aa2:	23 30       	cpi	r18, 0x03	; 3
     aa4:	31 05       	cpc	r19, r1
     aa6:	c1 f0       	breq	.+48     	; 0xad8 <DIO_GetPortValue+0x78>
     aa8:	8d 81       	ldd	r24, Y+5	; 0x05
     aaa:	9e 81       	ldd	r25, Y+6	; 0x06
     aac:	84 30       	cpi	r24, 0x04	; 4
     aae:	91 05       	cpc	r25, r1
     ab0:	e1 f0       	breq	.+56     	; 0xaea <DIO_GetPortValue+0x8a>
     ab2:	24 c0       	rjmp	.+72     	; 0xafc <DIO_GetPortValue+0x9c>
			{
			case PORTA:
				*val =  DIO_PINA;
     ab4:	e9 e3       	ldi	r30, 0x39	; 57
     ab6:	f0 e0       	ldi	r31, 0x00	; 0
     ab8:	80 81       	ld	r24, Z
     aba:	ea 81       	ldd	r30, Y+2	; 0x02
     abc:	fb 81       	ldd	r31, Y+3	; 0x03
     abe:	80 83       	st	Z, r24
				return 1;
     ac0:	91 e0       	ldi	r25, 0x01	; 1
     ac2:	9c 83       	std	Y+4, r25	; 0x04
     ac4:	1d c0       	rjmp	.+58     	; 0xb00 <DIO_GetPortValue+0xa0>
				break;
			case PORTB:
				*val =  DIO_PINB;
     ac6:	e6 e3       	ldi	r30, 0x36	; 54
     ac8:	f0 e0       	ldi	r31, 0x00	; 0
     aca:	80 81       	ld	r24, Z
     acc:	ea 81       	ldd	r30, Y+2	; 0x02
     ace:	fb 81       	ldd	r31, Y+3	; 0x03
     ad0:	80 83       	st	Z, r24
				return 1;
     ad2:	21 e0       	ldi	r18, 0x01	; 1
     ad4:	2c 83       	std	Y+4, r18	; 0x04
     ad6:	14 c0       	rjmp	.+40     	; 0xb00 <DIO_GetPortValue+0xa0>
				break;
			case PORTC:
				*val =  DIO_PINC;
     ad8:	e3 e3       	ldi	r30, 0x33	; 51
     ada:	f0 e0       	ldi	r31, 0x00	; 0
     adc:	80 81       	ld	r24, Z
     ade:	ea 81       	ldd	r30, Y+2	; 0x02
     ae0:	fb 81       	ldd	r31, Y+3	; 0x03
     ae2:	80 83       	st	Z, r24
				return 1;
     ae4:	31 e0       	ldi	r19, 0x01	; 1
     ae6:	3c 83       	std	Y+4, r19	; 0x04
     ae8:	0b c0       	rjmp	.+22     	; 0xb00 <DIO_GetPortValue+0xa0>
				break;
			case PORTD:
				*val =  DIO_PIND;
     aea:	e0 e3       	ldi	r30, 0x30	; 48
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	80 81       	ld	r24, Z
     af0:	ea 81       	ldd	r30, Y+2	; 0x02
     af2:	fb 81       	ldd	r31, Y+3	; 0x03
     af4:	80 83       	st	Z, r24
				return 1;
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	8c 83       	std	Y+4, r24	; 0x04
     afa:	02 c0       	rjmp	.+4      	; 0xb00 <DIO_GetPortValue+0xa0>
				break;
			default:
				return -2;
     afc:	9e ef       	ldi	r25, 0xFE	; 254
     afe:	9c 83       	std	Y+4, r25	; 0x04
     b00:	8c 81       	ldd	r24, Y+4	; 0x04
			}

}
     b02:	26 96       	adiw	r28, 0x06	; 6
     b04:	0f b6       	in	r0, 0x3f	; 63
     b06:	f8 94       	cli
     b08:	de bf       	out	0x3e, r29	; 62
     b0a:	0f be       	out	0x3f, r0	; 63
     b0c:	cd bf       	out	0x3d, r28	; 61
     b0e:	cf 91       	pop	r28
     b10:	df 91       	pop	r29
     b12:	08 95       	ret

00000b14 <DIO_TogglePin>:
 * Toggle Pin value of any port
 * INPUT : PORT name , PIN number
 * OUTPUT: 1 if ok and -1 if not ok
 **********************************************************************/
sint8_t DIO_TogglePin(uint8_t PORT , uint8_t PIN )
{
     b14:	df 93       	push	r29
     b16:	cf 93       	push	r28
     b18:	00 d0       	rcall	.+0      	; 0xb1a <DIO_TogglePin+0x6>
     b1a:	00 d0       	rcall	.+0      	; 0xb1c <DIO_TogglePin+0x8>
     b1c:	0f 92       	push	r0
     b1e:	cd b7       	in	r28, 0x3d	; 61
     b20:	de b7       	in	r29, 0x3e	; 62
     b22:	89 83       	std	Y+1, r24	; 0x01
     b24:	6a 83       	std	Y+2, r22	; 0x02
	if(PIN >7)
     b26:	8a 81       	ldd	r24, Y+2	; 0x02
     b28:	88 30       	cpi	r24, 0x08	; 8
     b2a:	18 f0       	brcs	.+6      	; 0xb32 <DIO_TogglePin+0x1e>
		{
			return -1;
     b2c:	2f ef       	ldi	r18, 0xFF	; 255
     b2e:	2d 83       	std	Y+5, r18	; 0x05
     b30:	7a c0       	rjmp	.+244    	; 0xc26 <DIO_TogglePin+0x112>
		}
		else
		{
				switch(PORT)
     b32:	89 81       	ldd	r24, Y+1	; 0x01
     b34:	28 2f       	mov	r18, r24
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	3c 83       	std	Y+4, r19	; 0x04
     b3a:	2b 83       	std	Y+3, r18	; 0x03
     b3c:	8b 81       	ldd	r24, Y+3	; 0x03
     b3e:	9c 81       	ldd	r25, Y+4	; 0x04
     b40:	82 30       	cpi	r24, 0x02	; 2
     b42:	91 05       	cpc	r25, r1
     b44:	69 f1       	breq	.+90     	; 0xba0 <DIO_TogglePin+0x8c>
     b46:	2b 81       	ldd	r18, Y+3	; 0x03
     b48:	3c 81       	ldd	r19, Y+4	; 0x04
     b4a:	23 30       	cpi	r18, 0x03	; 3
     b4c:	31 05       	cpc	r19, r1
     b4e:	34 f4       	brge	.+12     	; 0xb5c <DIO_TogglePin+0x48>
     b50:	8b 81       	ldd	r24, Y+3	; 0x03
     b52:	9c 81       	ldd	r25, Y+4	; 0x04
     b54:	81 30       	cpi	r24, 0x01	; 1
     b56:	91 05       	cpc	r25, r1
     b58:	69 f0       	breq	.+26     	; 0xb74 <DIO_TogglePin+0x60>
     b5a:	63 c0       	rjmp	.+198    	; 0xc22 <DIO_TogglePin+0x10e>
     b5c:	2b 81       	ldd	r18, Y+3	; 0x03
     b5e:	3c 81       	ldd	r19, Y+4	; 0x04
     b60:	23 30       	cpi	r18, 0x03	; 3
     b62:	31 05       	cpc	r19, r1
     b64:	91 f1       	breq	.+100    	; 0xbca <DIO_TogglePin+0xb6>
     b66:	8b 81       	ldd	r24, Y+3	; 0x03
     b68:	9c 81       	ldd	r25, Y+4	; 0x04
     b6a:	84 30       	cpi	r24, 0x04	; 4
     b6c:	91 05       	cpc	r25, r1
     b6e:	09 f4       	brne	.+2      	; 0xb72 <DIO_TogglePin+0x5e>
     b70:	42 c0       	rjmp	.+132    	; 0xbf6 <DIO_TogglePin+0xe2>
     b72:	57 c0       	rjmp	.+174    	; 0xc22 <DIO_TogglePin+0x10e>
						{
						case PORTA:
							TOGGLE_BIT(DIO_PORTA,PIN);
     b74:	ab e3       	ldi	r26, 0x3B	; 59
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	eb e3       	ldi	r30, 0x3B	; 59
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	48 2f       	mov	r20, r24
     b80:	8a 81       	ldd	r24, Y+2	; 0x02
     b82:	28 2f       	mov	r18, r24
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	02 2e       	mov	r0, r18
     b8c:	02 c0       	rjmp	.+4      	; 0xb92 <DIO_TogglePin+0x7e>
     b8e:	88 0f       	add	r24, r24
     b90:	99 1f       	adc	r25, r25
     b92:	0a 94       	dec	r0
     b94:	e2 f7       	brpl	.-8      	; 0xb8e <DIO_TogglePin+0x7a>
     b96:	84 27       	eor	r24, r20
     b98:	8c 93       	st	X, r24
							return 1;
     b9a:	91 e0       	ldi	r25, 0x01	; 1
     b9c:	9d 83       	std	Y+5, r25	; 0x05
     b9e:	43 c0       	rjmp	.+134    	; 0xc26 <DIO_TogglePin+0x112>
							break;
						case PORTB:
							TOGGLE_BIT(DIO_PORTB,PIN);
     ba0:	a8 e3       	ldi	r26, 0x38	; 56
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	e8 e3       	ldi	r30, 0x38	; 56
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z
     baa:	48 2f       	mov	r20, r24
     bac:	8a 81       	ldd	r24, Y+2	; 0x02
     bae:	28 2f       	mov	r18, r24
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	02 c0       	rjmp	.+4      	; 0xbbc <DIO_TogglePin+0xa8>
     bb8:	88 0f       	add	r24, r24
     bba:	99 1f       	adc	r25, r25
     bbc:	2a 95       	dec	r18
     bbe:	e2 f7       	brpl	.-8      	; 0xbb8 <DIO_TogglePin+0xa4>
     bc0:	84 27       	eor	r24, r20
     bc2:	8c 93       	st	X, r24
							return 1;
     bc4:	21 e0       	ldi	r18, 0x01	; 1
     bc6:	2d 83       	std	Y+5, r18	; 0x05
     bc8:	2e c0       	rjmp	.+92     	; 0xc26 <DIO_TogglePin+0x112>
							break;
						case PORTC:
							TOGGLE_BIT(DIO_PORTC,PIN);
     bca:	a5 e3       	ldi	r26, 0x35	; 53
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e5 e3       	ldi	r30, 0x35	; 53
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	48 2f       	mov	r20, r24
     bd6:	8a 81       	ldd	r24, Y+2	; 0x02
     bd8:	28 2f       	mov	r18, r24
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	02 2e       	mov	r0, r18
     be2:	02 c0       	rjmp	.+4      	; 0xbe8 <DIO_TogglePin+0xd4>
     be4:	88 0f       	add	r24, r24
     be6:	99 1f       	adc	r25, r25
     be8:	0a 94       	dec	r0
     bea:	e2 f7       	brpl	.-8      	; 0xbe4 <DIO_TogglePin+0xd0>
     bec:	84 27       	eor	r24, r20
     bee:	8c 93       	st	X, r24
							return 1;
     bf0:	31 e0       	ldi	r19, 0x01	; 1
     bf2:	3d 83       	std	Y+5, r19	; 0x05
     bf4:	18 c0       	rjmp	.+48     	; 0xc26 <DIO_TogglePin+0x112>
							break;
						case PORTD:
							TOGGLE_BIT(DIO_PORTD,PIN);
     bf6:	a2 e3       	ldi	r26, 0x32	; 50
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e2 e3       	ldi	r30, 0x32	; 50
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	48 2f       	mov	r20, r24
     c02:	8a 81       	ldd	r24, Y+2	; 0x02
     c04:	28 2f       	mov	r18, r24
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	02 2e       	mov	r0, r18
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <DIO_TogglePin+0x100>
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	0a 94       	dec	r0
     c16:	e2 f7       	brpl	.-8      	; 0xc10 <DIO_TogglePin+0xfc>
     c18:	84 27       	eor	r24, r20
     c1a:	8c 93       	st	X, r24
							return 1;
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	8d 83       	std	Y+5, r24	; 0x05
     c20:	02 c0       	rjmp	.+4      	; 0xc26 <DIO_TogglePin+0x112>
							break;
						default:
							return -2;
     c22:	9e ef       	ldi	r25, 0xFE	; 254
     c24:	9d 83       	std	Y+5, r25	; 0x05
     c26:	8d 81       	ldd	r24, Y+5	; 0x05
						}

		}
}
     c28:	0f 90       	pop	r0
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	0f 90       	pop	r0
     c32:	cf 91       	pop	r28
     c34:	df 91       	pop	r29
     c36:	08 95       	ret

00000c38 <LCD_Init>:
#include "LCD_Interface.h"
#include "LCD_Config.h"
#include "LCD_Private.h"

void LCD_Init()
{
     c38:	df 93       	push	r29
     c3a:	cf 93       	push	r28
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDircection(LCD_PORT,7,OUTPUT);  // LCD PORT OUTPUT
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	67 e0       	ldi	r22, 0x07	; 7
     c44:	41 e0       	ldi	r20, 0x01	; 1
     c46:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPinDircection>
	DIO_SetPinDircection(LCD_PORT,1,OUTPUT);
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	61 e0       	ldi	r22, 0x01	; 1
     c4e:	41 e0       	ldi	r20, 0x01	; 1
     c50:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPinDircection>
	DIO_SetPinDircection(LCD_PORT,2,OUTPUT);
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	62 e0       	ldi	r22, 0x02	; 2
     c58:	41 e0       	ldi	r20, 0x01	; 1
     c5a:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPinDircection>
	DIO_SetPinDircection(LCD_PORT,3,OUTPUT);
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	63 e0       	ldi	r22, 0x03	; 3
     c62:	41 e0       	ldi	r20, 0x01	; 1
     c64:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPinDircection>
	DIO_SetPinDircection(LCD_PORT,4,OUTPUT);
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	64 e0       	ldi	r22, 0x04	; 4
     c6c:	41 e0       	ldi	r20, 0x01	; 1
     c6e:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPinDircection>
	DIO_SetPinDircection(LCD_PORT,5,OUTPUT);
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	65 e0       	ldi	r22, 0x05	; 5
     c76:	41 e0       	ldi	r20, 0x01	; 1
     c78:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPinDircection>
	DIO_SetPinDircection(LCD_PORT,6,OUTPUT);
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	66 e0       	ldi	r22, 0x06	; 6
     c80:	41 e0       	ldi	r20, 0x01	; 1
     c82:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPinDircection>

	DELAY(50);
     c86:	62 e3       	ldi	r22, 0x32	; 50
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	0e 94 16 08 	call	0x102c	; 0x102c <DELAY>
	LCD_SendCommand(0x28); // Initialize 2 lines  5x8 dots and 4 bit mode
     c92:	88 e2       	ldi	r24, 0x28	; 40
     c94:	0e 94 79 06 	call	0xcf2	; 0xcf2 <LCD_SendCommand>
	LCD_SendCommand(LCD_DISP_ON_CURSOR_BLINK); // Display On , Cursor blinking
     c98:	8f e0       	ldi	r24, 0x0F	; 15
     c9a:	0e 94 79 06 	call	0xcf2	; 0xcf2 <LCD_SendCommand>
	LCD_SendCommand(LCD_CLEAR_SCREEN);
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	0e 94 79 06 	call	0xcf2	; 0xcf2 <LCD_SendCommand>
	LCD_SendCommand(LCD_ENTRY_MODE); // Entry mode
     ca4:	86 e0       	ldi	r24, 0x06	; 6
     ca6:	0e 94 79 06 	call	0xcf2	; 0xcf2 <LCD_SendCommand>

}
     caa:	cf 91       	pop	r28
     cac:	df 91       	pop	r29
     cae:	08 95       	ret

00000cb0 <LCD_GotoXY>:

void LCD_GotoXY (uint8_t line ,uint8_t postion)
{
     cb0:	df 93       	push	r29
     cb2:	cf 93       	push	r28
     cb4:	00 d0       	rcall	.+0      	; 0xcb6 <LCD_GotoXY+0x6>
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
     cba:	89 83       	std	Y+1, r24	; 0x01
     cbc:	6a 83       	std	Y+2, r22	; 0x02
	if(line==0)
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	88 23       	and	r24, r24
     cc2:	41 f4       	brne	.+16     	; 0xcd4 <LCD_GotoXY+0x24>
	{
		if(postion < 16 && postion >=0)
     cc4:	8a 81       	ldd	r24, Y+2	; 0x02
     cc6:	80 31       	cpi	r24, 0x10	; 16
     cc8:	78 f4       	brcc	.+30     	; 0xce8 <LCD_GotoXY+0x38>
			LCD_SendCommand(0x80+postion);
     cca:	8a 81       	ldd	r24, Y+2	; 0x02
     ccc:	80 58       	subi	r24, 0x80	; 128
     cce:	0e 94 79 06 	call	0xcf2	; 0xcf2 <LCD_SendCommand>
     cd2:	0a c0       	rjmp	.+20     	; 0xce8 <LCD_GotoXY+0x38>
	}
	else if (line == 1)
     cd4:	89 81       	ldd	r24, Y+1	; 0x01
     cd6:	81 30       	cpi	r24, 0x01	; 1
     cd8:	39 f4       	brne	.+14     	; 0xce8 <LCD_GotoXY+0x38>
	{
		if(postion < 16 && postion >=0)
     cda:	8a 81       	ldd	r24, Y+2	; 0x02
     cdc:	80 31       	cpi	r24, 0x10	; 16
     cde:	20 f4       	brcc	.+8      	; 0xce8 <LCD_GotoXY+0x38>
			LCD_SendCommand(0xc0+postion);
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	80 54       	subi	r24, 0x40	; 64
     ce4:	0e 94 79 06 	call	0xcf2	; 0xcf2 <LCD_SendCommand>
	}
}
     ce8:	0f 90       	pop	r0
     cea:	0f 90       	pop	r0
     cec:	cf 91       	pop	r28
     cee:	df 91       	pop	r29
     cf0:	08 95       	ret

00000cf2 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t Command)
{
     cf2:	df 93       	push	r29
     cf4:	cf 93       	push	r28
     cf6:	0f 92       	push	r0
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
     cfc:	89 83       	std	Y+1, r24	; 0x01
	DIO_SetPortValue(LCD_PORT,((LCD_PORT & 0x0F)|(Command & 0xF0)));
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	80 7f       	andi	r24, 0xF0	; 240
     d02:	81 60       	ori	r24, 0x01	; 1
     d04:	98 2f       	mov	r25, r24
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	69 2f       	mov	r22, r25
     d0a:	0e 94 47 04 	call	0x88e	; 0x88e <DIO_SetPortValue>

	DIO_SetPinValue(LCD_PORT,LCD_RS,LOW);
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	61 e0       	ldi	r22, 0x01	; 1
     d12:	40 e0       	ldi	r20, 0x00	; 0
     d14:	0e 94 26 03 	call	0x64c	; 0x64c <DIO_SetPinValue>
	//DIO_SetPinValue(LCD_PORT,LCD_RW,LOW);
	DIO_SetPinValue(LCD_PORT,LCD_E,HIGH);
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	63 e0       	ldi	r22, 0x03	; 3
     d1c:	41 e0       	ldi	r20, 0x01	; 1
     d1e:	0e 94 26 03 	call	0x64c	; 0x64c <DIO_SetPinValue>
	DELAY(1);
     d22:	61 e0       	ldi	r22, 0x01	; 1
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	0e 94 16 08 	call	0x102c	; 0x102c <DELAY>
	DIO_SetPinValue(LCD_PORT,LCD_E,LOW);
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	63 e0       	ldi	r22, 0x03	; 3
     d32:	40 e0       	ldi	r20, 0x00	; 0
     d34:	0e 94 26 03 	call	0x64c	; 0x64c <DIO_SetPinValue>
	DELAY(1);
     d38:	61 e0       	ldi	r22, 0x01	; 1
     d3a:	70 e0       	ldi	r23, 0x00	; 0
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	0e 94 16 08 	call	0x102c	; 0x102c <DELAY>

		DIO_SetPortValue(LCD_PORT,(LCD_PORT & 0x0F) | (Command << 4));
     d44:	89 81       	ldd	r24, Y+1	; 0x01
     d46:	88 2f       	mov	r24, r24
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	82 95       	swap	r24
     d4c:	92 95       	swap	r25
     d4e:	90 7f       	andi	r25, 0xF0	; 240
     d50:	98 27       	eor	r25, r24
     d52:	80 7f       	andi	r24, 0xF0	; 240
     d54:	98 27       	eor	r25, r24
     d56:	81 60       	ori	r24, 0x01	; 1
     d58:	98 2f       	mov	r25, r24
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	69 2f       	mov	r22, r25
     d5e:	0e 94 47 04 	call	0x88e	; 0x88e <DIO_SetPortValue>
		DIO_SetPinValue(LCD_PORT,LCD_RS,LOW);
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	61 e0       	ldi	r22, 0x01	; 1
     d66:	40 e0       	ldi	r20, 0x00	; 0
     d68:	0e 94 26 03 	call	0x64c	; 0x64c <DIO_SetPinValue>
	//	DIO_SetPinValue(LCD_PORT,LCD_RW,LOW);
		DIO_SetPinValue(LCD_PORT,LCD_E,HIGH);
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	63 e0       	ldi	r22, 0x03	; 3
     d70:	41 e0       	ldi	r20, 0x01	; 1
     d72:	0e 94 26 03 	call	0x64c	; 0x64c <DIO_SetPinValue>
		DELAY(1);;
     d76:	61 e0       	ldi	r22, 0x01	; 1
     d78:	70 e0       	ldi	r23, 0x00	; 0
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 94 16 08 	call	0x102c	; 0x102c <DELAY>
		DIO_SetPinValue(LCD_PORT,LCD_E,LOW);
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	63 e0       	ldi	r22, 0x03	; 3
     d86:	40 e0       	ldi	r20, 0x00	; 0
     d88:	0e 94 26 03 	call	0x64c	; 0x64c <DIO_SetPinValue>
		DELAY(1);
     d8c:	61 e0       	ldi	r22, 0x01	; 1
     d8e:	70 e0       	ldi	r23, 0x00	; 0
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	0e 94 16 08 	call	0x102c	; 0x102c <DELAY>
}
     d98:	0f 90       	pop	r0
     d9a:	cf 91       	pop	r28
     d9c:	df 91       	pop	r29
     d9e:	08 95       	ret

00000da0 <LCD_SendChar>:

void LCD_SendChar(uint8_t Char)
{
     da0:	df 93       	push	r29
     da2:	cf 93       	push	r28
     da4:	0f 92       	push	r0
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
     daa:	89 83       	std	Y+1, r24	; 0x01
//	LCD_Check_Busy();
	DIO_SetPortValue(LCD_PORT,((LCD_PORT & 0x0F) | (Char & 0xF0)));
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	80 7f       	andi	r24, 0xF0	; 240
     db0:	81 60       	ori	r24, 0x01	; 1
     db2:	98 2f       	mov	r25, r24
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	69 2f       	mov	r22, r25
     db8:	0e 94 47 04 	call	0x88e	; 0x88e <DIO_SetPortValue>
	DIO_SetPinValue(LCD_PORT,LCD_RS,HIGH);
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	61 e0       	ldi	r22, 0x01	; 1
     dc0:	41 e0       	ldi	r20, 0x01	; 1
     dc2:	0e 94 26 03 	call	0x64c	; 0x64c <DIO_SetPinValue>
	//DIO_SetPinValue(LCD_PORT,LCD_RW,LOW);
	DIO_SetPinValue(LCD_PORT,LCD_E,HIGH);
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	63 e0       	ldi	r22, 0x03	; 3
     dca:	41 e0       	ldi	r20, 0x01	; 1
     dcc:	0e 94 26 03 	call	0x64c	; 0x64c <DIO_SetPinValue>
	DELAY(1);
     dd0:	61 e0       	ldi	r22, 0x01	; 1
     dd2:	70 e0       	ldi	r23, 0x00	; 0
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	0e 94 16 08 	call	0x102c	; 0x102c <DELAY>
	DIO_SetPinValue(LCD_PORT,LCD_E,LOW);
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	63 e0       	ldi	r22, 0x03	; 3
     de0:	40 e0       	ldi	r20, 0x00	; 0
     de2:	0e 94 26 03 	call	0x64c	; 0x64c <DIO_SetPinValue>
	DELAY(1);
     de6:	61 e0       	ldi	r22, 0x01	; 1
     de8:	70 e0       	ldi	r23, 0x00	; 0
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	0e 94 16 08 	call	0x102c	; 0x102c <DELAY>

	DIO_SetPortValue(LCD_PORT,((LCD_PORT & 0x0F) | (Char << 4)));
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	88 2f       	mov	r24, r24
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	82 95       	swap	r24
     dfa:	92 95       	swap	r25
     dfc:	90 7f       	andi	r25, 0xF0	; 240
     dfe:	98 27       	eor	r25, r24
     e00:	80 7f       	andi	r24, 0xF0	; 240
     e02:	98 27       	eor	r25, r24
     e04:	81 60       	ori	r24, 0x01	; 1
     e06:	98 2f       	mov	r25, r24
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	69 2f       	mov	r22, r25
     e0c:	0e 94 47 04 	call	0x88e	; 0x88e <DIO_SetPortValue>
	DIO_SetPinValue(LCD_PORT,LCD_RS,HIGH);
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	61 e0       	ldi	r22, 0x01	; 1
     e14:	41 e0       	ldi	r20, 0x01	; 1
     e16:	0e 94 26 03 	call	0x64c	; 0x64c <DIO_SetPinValue>
		//DIO_SetPinValue(LCD_PORT,LCD_RW,LOW);
		DIO_SetPinValue(LCD_PORT,LCD_E,HIGH);
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	63 e0       	ldi	r22, 0x03	; 3
     e1e:	41 e0       	ldi	r20, 0x01	; 1
     e20:	0e 94 26 03 	call	0x64c	; 0x64c <DIO_SetPinValue>
		DELAY(1);
     e24:	61 e0       	ldi	r22, 0x01	; 1
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	0e 94 16 08 	call	0x102c	; 0x102c <DELAY>
		DIO_SetPinValue(LCD_PORT,LCD_E,LOW);
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	63 e0       	ldi	r22, 0x03	; 3
     e34:	40 e0       	ldi	r20, 0x00	; 0
     e36:	0e 94 26 03 	call	0x64c	; 0x64c <DIO_SetPinValue>
		DELAY(1);
     e3a:	61 e0       	ldi	r22, 0x01	; 1
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	0e 94 16 08 	call	0x102c	; 0x102c <DELAY>

}
     e46:	0f 90       	pop	r0
     e48:	cf 91       	pop	r28
     e4a:	df 91       	pop	r29
     e4c:	08 95       	ret

00000e4e <lcd_string>:

void lcd_string(char *str){
     e4e:	df 93       	push	r29
     e50:	cf 93       	push	r28
     e52:	00 d0       	rcall	.+0      	; 0xe54 <lcd_string+0x6>
     e54:	0f 92       	push	r0
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
     e5a:	9b 83       	std	Y+3, r25	; 0x03
     e5c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t count=0;
     e5e:	19 82       	std	Y+1, r1	; 0x01
     e60:	22 c0       	rjmp	.+68     	; 0xea6 <lcd_string+0x58>
	while (*str!='\0')
	{
		count++;
     e62:	89 81       	ldd	r24, Y+1	; 0x01
     e64:	8f 5f       	subi	r24, 0xFF	; 255
     e66:	89 83       	std	Y+1, r24	; 0x01
		LCD_SendChar(*str);
     e68:	ea 81       	ldd	r30, Y+2	; 0x02
     e6a:	fb 81       	ldd	r31, Y+3	; 0x03
     e6c:	80 81       	ld	r24, Z
     e6e:	0e 94 d0 06 	call	0xda0	; 0xda0 <LCD_SendChar>
		str++;
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	9b 81       	ldd	r25, Y+3	; 0x03
     e76:	01 96       	adiw	r24, 0x01	; 1
     e78:	9b 83       	std	Y+3, r25	; 0x03
     e7a:	8a 83       	std	Y+2, r24	; 0x02
		if (count == 16)
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	80 31       	cpi	r24, 0x10	; 16
     e80:	29 f4       	brne	.+10     	; 0xe8c <lcd_string+0x3e>
				{
			LCD_GotoXY(1,0);
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	0e 94 58 06 	call	0xcb0	; 0xcb0 <LCD_GotoXY>
     e8a:	0d c0       	rjmp	.+26     	; 0xea6 <lcd_string+0x58>
				}
				else if (count == 32 || count ==33)
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	80 32       	cpi	r24, 0x20	; 32
     e90:	19 f0       	breq	.+6      	; 0xe98 <lcd_string+0x4a>
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	81 32       	cpi	r24, 0x21	; 33
     e96:	39 f4       	brne	.+14     	; 0xea6 <lcd_string+0x58>
				{
					LCD_Clear_screen();
     e98:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_Clear_screen>
					LCD_GotoXY(0,0);
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	60 e0       	ldi	r22, 0x00	; 0
     ea0:	0e 94 58 06 	call	0xcb0	; 0xcb0 <LCD_GotoXY>
					count =0;
     ea4:	19 82       	std	Y+1, r1	; 0x01

}

void lcd_string(char *str){
	uint8_t count=0;
	while (*str!='\0')
     ea6:	ea 81       	ldd	r30, Y+2	; 0x02
     ea8:	fb 81       	ldd	r31, Y+3	; 0x03
     eaa:	80 81       	ld	r24, Z
     eac:	88 23       	and	r24, r24
     eae:	c9 f6       	brne	.-78     	; 0xe62 <lcd_string+0x14>
					LCD_Clear_screen();
					LCD_GotoXY(0,0);
					count =0;
				}
	}
}
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	cf 91       	pop	r28
     eb8:	df 91       	pop	r29
     eba:	08 95       	ret

00000ebc <LCD_Check_Busy>:

void LCD_Check_Busy(void)
{
     ebc:	df 93       	push	r29
     ebe:	cf 93       	push	r28
     ec0:	0f 92       	push	r0
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
	uint8_t LCD_Busy_Flag=0;
     ec6:	19 82       	std	Y+1, r1	; 0x01

		DIO_SetPinDircection(LCD_PORT,LCD_PIN4,INPUT);
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	64 e0       	ldi	r22, 0x04	; 4
     ecc:	40 e0       	ldi	r20, 0x00	; 0
     ece:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPinDircection>
		DIO_SetPinDircection(LCD_PORT,LCD_PIN5,INPUT);
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	65 e0       	ldi	r22, 0x05	; 5
     ed6:	40 e0       	ldi	r20, 0x00	; 0
     ed8:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPinDircection>
		DIO_SetPinDircection(LCD_PORT,LCD_PIN6,INPUT);
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	66 e0       	ldi	r22, 0x06	; 6
     ee0:	40 e0       	ldi	r20, 0x00	; 0
     ee2:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPinDircection>
		DIO_SetPinDircection(LCD_PORT,LCD_PIN7,INPUT);
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	67 e0       	ldi	r22, 0x07	; 7
     eea:	40 e0       	ldi	r20, 0x00	; 0
     eec:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPinDircection>

	DIO_SetPinValue(LCD_PORT,LCD_RS,LOW);
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	61 e0       	ldi	r22, 0x01	; 1
     ef4:	40 e0       	ldi	r20, 0x00	; 0
     ef6:	0e 94 26 03 	call	0x64c	; 0x64c <DIO_SetPinValue>
	DIO_SetPinValue(LCD_PORT,LCD_RW,HIGH);
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	62 e0       	ldi	r22, 0x02	; 2
     efe:	41 e0       	ldi	r20, 0x01	; 1
     f00:	0e 94 26 03 	call	0x64c	; 0x64c <DIO_SetPinValue>
	DIO_SetPinValue(LCD_PORT,LCD_E,HIGH);
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	63 e0       	ldi	r22, 0x03	; 3
     f08:	41 e0       	ldi	r20, 0x01	; 1
     f0a:	0e 94 26 03 	call	0x64c	; 0x64c <DIO_SetPinValue>
	DELAY(1);
     f0e:	61 e0       	ldi	r22, 0x01	; 1
     f10:	70 e0       	ldi	r23, 0x00	; 0
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	0e 94 16 08 	call	0x102c	; 0x102c <DELAY>
		DIO_SetPinValue(LCD_PORT,LCD_E,LOW);
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	63 e0       	ldi	r22, 0x03	; 3
     f1e:	40 e0       	ldi	r20, 0x00	; 0
     f20:	0e 94 26 03 	call	0x64c	; 0x64c <DIO_SetPinValue>
		DELAY(1);
     f24:	61 e0       	ldi	r22, 0x01	; 1
     f26:	70 e0       	ldi	r23, 0x00	; 0
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	0e 94 16 08 	call	0x102c	; 0x102c <DELAY>

	DIO_SetPinDircection(LCD_PORT,LCD_PIN4,OUTPUT);
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	64 e0       	ldi	r22, 0x04	; 4
     f34:	41 e0       	ldi	r20, 0x01	; 1
     f36:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPinDircection>
	DIO_SetPinDircection(LCD_PORT,LCD_PIN5,OUTPUT);
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	65 e0       	ldi	r22, 0x05	; 5
     f3e:	41 e0       	ldi	r20, 0x01	; 1
     f40:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPinDircection>
	DIO_SetPinDircection(LCD_PORT,LCD_PIN6,OUTPUT);
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	66 e0       	ldi	r22, 0x06	; 6
     f48:	41 e0       	ldi	r20, 0x01	; 1
     f4a:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPinDircection>
	DIO_SetPinDircection(LCD_PORT,LCD_PIN7,OUTPUT);
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	67 e0       	ldi	r22, 0x07	; 7
     f52:	41 e0       	ldi	r20, 0x01	; 1
     f54:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPinDircection>

}
     f58:	0f 90       	pop	r0
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	08 95       	ret

00000f60 <Delay>:

void Delay(uint32_t delay)
{
     f60:	df 93       	push	r29
     f62:	cf 93       	push	r28
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
     f68:	28 97       	sbiw	r28, 0x08	; 8
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	f8 94       	cli
     f6e:	de bf       	out	0x3e, r29	; 62
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	cd bf       	out	0x3d, r28	; 61
     f74:	6d 83       	std	Y+5, r22	; 0x05
     f76:	7e 83       	std	Y+6, r23	; 0x06
     f78:	8f 83       	std	Y+7, r24	; 0x07
     f7a:	98 87       	std	Y+8, r25	; 0x08
	volatile uint32_t i =0;
     f7c:	19 82       	std	Y+1, r1	; 0x01
     f7e:	1a 82       	std	Y+2, r1	; 0x02
     f80:	1b 82       	std	Y+3, r1	; 0x03
     f82:	1c 82       	std	Y+4, r1	; 0x04
	for ( i =0 ; i < delay ; i++)
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	1a 82       	std	Y+2, r1	; 0x02
     f88:	1b 82       	std	Y+3, r1	; 0x03
     f8a:	1c 82       	std	Y+4, r1	; 0x04
     f8c:	0c c0       	rjmp	.+24     	; 0xfa6 <Delay+0x46>
	{
		asm volatile ("NOP");
     f8e:	00 00       	nop
}

void Delay(uint32_t delay)
{
	volatile uint32_t i =0;
	for ( i =0 ; i < delay ; i++)
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	9a 81       	ldd	r25, Y+2	; 0x02
     f94:	ab 81       	ldd	r26, Y+3	; 0x03
     f96:	bc 81       	ldd	r27, Y+4	; 0x04
     f98:	01 96       	adiw	r24, 0x01	; 1
     f9a:	a1 1d       	adc	r26, r1
     f9c:	b1 1d       	adc	r27, r1
     f9e:	89 83       	std	Y+1, r24	; 0x01
     fa0:	9a 83       	std	Y+2, r25	; 0x02
     fa2:	ab 83       	std	Y+3, r26	; 0x03
     fa4:	bc 83       	std	Y+4, r27	; 0x04
     fa6:	29 81       	ldd	r18, Y+1	; 0x01
     fa8:	3a 81       	ldd	r19, Y+2	; 0x02
     faa:	4b 81       	ldd	r20, Y+3	; 0x03
     fac:	5c 81       	ldd	r21, Y+4	; 0x04
     fae:	8d 81       	ldd	r24, Y+5	; 0x05
     fb0:	9e 81       	ldd	r25, Y+6	; 0x06
     fb2:	af 81       	ldd	r26, Y+7	; 0x07
     fb4:	b8 85       	ldd	r27, Y+8	; 0x08
     fb6:	28 17       	cp	r18, r24
     fb8:	39 07       	cpc	r19, r25
     fba:	4a 07       	cpc	r20, r26
     fbc:	5b 07       	cpc	r21, r27
     fbe:	38 f3       	brcs	.-50     	; 0xf8e <Delay+0x2e>
	{
		asm volatile ("NOP");
	}
}
     fc0:	28 96       	adiw	r28, 0x08	; 8
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	f8 94       	cli
     fc6:	de bf       	out	0x3e, r29	; 62
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	cd bf       	out	0x3d, r28	; 61
     fcc:	cf 91       	pop	r28
     fce:	df 91       	pop	r29
     fd0:	08 95       	ret

00000fd2 <LCD_Clear_screen>:


void LCD_Clear_screen()
{
     fd2:	df 93       	push	r29
     fd4:	cf 93       	push	r28
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand(0x01);
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	0e 94 79 06 	call	0xcf2	; 0xcf2 <LCD_SendCommand>
	DELAY(2);
     fe0:	62 e0       	ldi	r22, 0x02	; 2
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	0e 94 16 08 	call	0x102c	; 0x102c <DELAY>
	LCD_SendCommand(0x80);
     fec:	80 e8       	ldi	r24, 0x80	; 128
     fee:	0e 94 79 06 	call	0xcf2	; 0xcf2 <LCD_SendCommand>
	DELAY(2);
     ff2:	62 e0       	ldi	r22, 0x02	; 2
     ff4:	70 e0       	ldi	r23, 0x00	; 0
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	0e 94 16 08 	call	0x102c	; 0x102c <DELAY>
}
     ffe:	cf 91       	pop	r28
    1000:	df 91       	pop	r29
    1002:	08 95       	ret

00001004 <LCD_MoveCursorLeft>:


void LCD_MoveCursorLeft()
{
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand(0x10);
    100c:	80 e1       	ldi	r24, 0x10	; 16
    100e:	0e 94 79 06 	call	0xcf2	; 0xcf2 <LCD_SendCommand>
}
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	08 95       	ret

00001018 <LCD_MoveCursorRight>:


void LCD_MoveCursorRight()
{
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand(0x14);
    1020:	84 e1       	ldi	r24, 0x14	; 20
    1022:	0e 94 79 06 	call	0xcf2	; 0xcf2 <LCD_SendCommand>
}
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <DELAY>:


void DELAY(uint32_t time)
{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	2c 97       	sbiw	r28, 0x0c	; 12
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	f8 94       	cli
    103a:	de bf       	out	0x3e, r29	; 62
    103c:	0f be       	out	0x3f, r0	; 63
    103e:	cd bf       	out	0x3d, r28	; 61
    1040:	69 87       	std	Y+9, r22	; 0x09
    1042:	7a 87       	std	Y+10, r23	; 0x0a
    1044:	8b 87       	std	Y+11, r24	; 0x0b
    1046:	9c 87       	std	Y+12, r25	; 0x0c
	volatile uint32_t x,y;
	for(x=0;x<time ; x++)
    1048:	19 82       	std	Y+1, r1	; 0x01
    104a:	1a 82       	std	Y+2, r1	; 0x02
    104c:	1b 82       	std	Y+3, r1	; 0x03
    104e:	1c 82       	std	Y+4, r1	; 0x04
    1050:	27 c0       	rjmp	.+78     	; 0x10a0 <DELAY+0x74>
	{
		for(x=0;x<450;x++)
    1052:	19 82       	std	Y+1, r1	; 0x01
    1054:	1a 82       	std	Y+2, r1	; 0x02
    1056:	1b 82       	std	Y+3, r1	; 0x03
    1058:	1c 82       	std	Y+4, r1	; 0x04
    105a:	0b c0       	rjmp	.+22     	; 0x1072 <DELAY+0x46>
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	9a 81       	ldd	r25, Y+2	; 0x02
    1060:	ab 81       	ldd	r26, Y+3	; 0x03
    1062:	bc 81       	ldd	r27, Y+4	; 0x04
    1064:	01 96       	adiw	r24, 0x01	; 1
    1066:	a1 1d       	adc	r26, r1
    1068:	b1 1d       	adc	r27, r1
    106a:	89 83       	std	Y+1, r24	; 0x01
    106c:	9a 83       	std	Y+2, r25	; 0x02
    106e:	ab 83       	std	Y+3, r26	; 0x03
    1070:	bc 83       	std	Y+4, r27	; 0x04
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	9a 81       	ldd	r25, Y+2	; 0x02
    1076:	ab 81       	ldd	r26, Y+3	; 0x03
    1078:	bc 81       	ldd	r27, Y+4	; 0x04
    107a:	82 3c       	cpi	r24, 0xC2	; 194
    107c:	21 e0       	ldi	r18, 0x01	; 1
    107e:	92 07       	cpc	r25, r18
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	a2 07       	cpc	r26, r18
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	b2 07       	cpc	r27, r18
    1088:	48 f3       	brcs	.-46     	; 0x105c <DELAY+0x30>


void DELAY(uint32_t time)
{
	volatile uint32_t x,y;
	for(x=0;x<time ; x++)
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	9a 81       	ldd	r25, Y+2	; 0x02
    108e:	ab 81       	ldd	r26, Y+3	; 0x03
    1090:	bc 81       	ldd	r27, Y+4	; 0x04
    1092:	01 96       	adiw	r24, 0x01	; 1
    1094:	a1 1d       	adc	r26, r1
    1096:	b1 1d       	adc	r27, r1
    1098:	89 83       	std	Y+1, r24	; 0x01
    109a:	9a 83       	std	Y+2, r25	; 0x02
    109c:	ab 83       	std	Y+3, r26	; 0x03
    109e:	bc 83       	std	Y+4, r27	; 0x04
    10a0:	29 81       	ldd	r18, Y+1	; 0x01
    10a2:	3a 81       	ldd	r19, Y+2	; 0x02
    10a4:	4b 81       	ldd	r20, Y+3	; 0x03
    10a6:	5c 81       	ldd	r21, Y+4	; 0x04
    10a8:	89 85       	ldd	r24, Y+9	; 0x09
    10aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ac:	ab 85       	ldd	r26, Y+11	; 0x0b
    10ae:	bc 85       	ldd	r27, Y+12	; 0x0c
    10b0:	28 17       	cp	r18, r24
    10b2:	39 07       	cpc	r19, r25
    10b4:	4a 07       	cpc	r20, r26
    10b6:	5b 07       	cpc	r21, r27
    10b8:	60 f2       	brcs	.-104    	; 0x1052 <DELAY+0x26>
		for(x=0;x<450;x++)
		{

		}
	}
}
    10ba:	2c 96       	adiw	r28, 0x0c	; 12
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	de bf       	out	0x3e, r29	; 62
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	cd bf       	out	0x3d, r28	; 61
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	08 95       	ret

000010cc <main>:
#include "LCD_Interface.h"
#include "ADC_Interface.h"
#include "DIO_interface.h"

int main()
{
    10cc:	df 93       	push	r29
    10ce:	cf 93       	push	r28
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
    10d4:	27 97       	sbiw	r28, 0x07	; 7
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	f8 94       	cli
    10da:	de bf       	out	0x3e, r29	; 62
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	cd bf       	out	0x3d, r28	; 61
	char String[5];
	int value;

	LCD_Init();			/* Initialization of LCD */
    10e0:	0e 94 1c 06 	call	0xc38	; 0xc38 <LCD_Init>
	ADC_Init();
    10e4:	0e 94 41 00 	call	0x82	; 0x82 <ADC_Init>

	lcd_string("ADC value");	/* Write string on 1st line of LCD */
    10e8:	80 e6       	ldi	r24, 0x60	; 96
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	0e 94 27 07 	call	0xe4e	; 0xe4e <lcd_string>

	while(1)
	{

		LCD_SendCommand(0xc4);	/* LCD16x2 cursor position */
    10f0:	84 ec       	ldi	r24, 0xC4	; 196
    10f2:	0e 94 79 06 	call	0xcf2	; 0xcf2 <LCD_SendCommand>
		value = ADC_Read(0);	/* Read ADC channel 0 */
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_Read>
    10fc:	9a 83       	std	Y+2, r25	; 0x02
    10fe:	89 83       	std	Y+1, r24	; 0x01
		itoa(value,String,10);	/* Integer to string conversion */
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	9a 81       	ldd	r25, Y+2	; 0x02
    1104:	9e 01       	movw	r18, r28
    1106:	2d 5f       	subi	r18, 0xFD	; 253
    1108:	3f 4f       	sbci	r19, 0xFF	; 255
    110a:	b9 01       	movw	r22, r18
    110c:	4a e0       	ldi	r20, 0x0A	; 10
    110e:	50 e0       	ldi	r21, 0x00	; 0
    1110:	0e 94 93 08 	call	0x1126	; 0x1126 <itoa>
		lcd_string(String);
    1114:	ce 01       	movw	r24, r28
    1116:	03 96       	adiw	r24, 0x03	; 3
    1118:	0e 94 27 07 	call	0xe4e	; 0xe4e <lcd_string>
		lcd_string("  ");
    111c:	8a e6       	ldi	r24, 0x6A	; 106
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	0e 94 27 07 	call	0xe4e	; 0xe4e <lcd_string>
    1124:	e5 cf       	rjmp	.-54     	; 0x10f0 <main+0x24>

00001126 <itoa>:
    1126:	fb 01       	movw	r30, r22
    1128:	9f 01       	movw	r18, r30
    112a:	e8 94       	clt
    112c:	42 30       	cpi	r20, 0x02	; 2
    112e:	c4 f0       	brlt	.+48     	; 0x1160 <itoa+0x3a>
    1130:	45 32       	cpi	r20, 0x25	; 37
    1132:	b4 f4       	brge	.+44     	; 0x1160 <itoa+0x3a>
    1134:	4a 30       	cpi	r20, 0x0A	; 10
    1136:	29 f4       	brne	.+10     	; 0x1142 <itoa+0x1c>
    1138:	97 fb       	bst	r25, 7
    113a:	1e f4       	brtc	.+6      	; 0x1142 <itoa+0x1c>
    113c:	90 95       	com	r25
    113e:	81 95       	neg	r24
    1140:	9f 4f       	sbci	r25, 0xFF	; 255
    1142:	64 2f       	mov	r22, r20
    1144:	77 27       	eor	r23, r23
    1146:	0e 94 c4 08 	call	0x1188	; 0x1188 <__udivmodhi4>
    114a:	80 5d       	subi	r24, 0xD0	; 208
    114c:	8a 33       	cpi	r24, 0x3A	; 58
    114e:	0c f0       	brlt	.+2      	; 0x1152 <itoa+0x2c>
    1150:	89 5d       	subi	r24, 0xD9	; 217
    1152:	81 93       	st	Z+, r24
    1154:	cb 01       	movw	r24, r22
    1156:	00 97       	sbiw	r24, 0x00	; 0
    1158:	a1 f7       	brne	.-24     	; 0x1142 <itoa+0x1c>
    115a:	16 f4       	brtc	.+4      	; 0x1160 <itoa+0x3a>
    115c:	5d e2       	ldi	r21, 0x2D	; 45
    115e:	51 93       	st	Z+, r21
    1160:	10 82       	st	Z, r1
    1162:	c9 01       	movw	r24, r18
    1164:	0c 94 b4 08 	jmp	0x1168	; 0x1168 <strrev>

00001168 <strrev>:
    1168:	dc 01       	movw	r26, r24
    116a:	fc 01       	movw	r30, r24
    116c:	67 2f       	mov	r22, r23
    116e:	71 91       	ld	r23, Z+
    1170:	77 23       	and	r23, r23
    1172:	e1 f7       	brne	.-8      	; 0x116c <strrev+0x4>
    1174:	32 97       	sbiw	r30, 0x02	; 2
    1176:	04 c0       	rjmp	.+8      	; 0x1180 <strrev+0x18>
    1178:	7c 91       	ld	r23, X
    117a:	6d 93       	st	X+, r22
    117c:	70 83       	st	Z, r23
    117e:	62 91       	ld	r22, -Z
    1180:	ae 17       	cp	r26, r30
    1182:	bf 07       	cpc	r27, r31
    1184:	c8 f3       	brcs	.-14     	; 0x1178 <strrev+0x10>
    1186:	08 95       	ret

00001188 <__udivmodhi4>:
    1188:	aa 1b       	sub	r26, r26
    118a:	bb 1b       	sub	r27, r27
    118c:	51 e1       	ldi	r21, 0x11	; 17
    118e:	07 c0       	rjmp	.+14     	; 0x119e <__udivmodhi4_ep>

00001190 <__udivmodhi4_loop>:
    1190:	aa 1f       	adc	r26, r26
    1192:	bb 1f       	adc	r27, r27
    1194:	a6 17       	cp	r26, r22
    1196:	b7 07       	cpc	r27, r23
    1198:	10 f0       	brcs	.+4      	; 0x119e <__udivmodhi4_ep>
    119a:	a6 1b       	sub	r26, r22
    119c:	b7 0b       	sbc	r27, r23

0000119e <__udivmodhi4_ep>:
    119e:	88 1f       	adc	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	5a 95       	dec	r21
    11a4:	a9 f7       	brne	.-22     	; 0x1190 <__udivmodhi4_loop>
    11a6:	80 95       	com	r24
    11a8:	90 95       	com	r25
    11aa:	bc 01       	movw	r22, r24
    11ac:	cd 01       	movw	r24, r26
    11ae:	08 95       	ret

000011b0 <_exit>:
    11b0:	f8 94       	cli

000011b2 <__stop_program>:
    11b2:	ff cf       	rjmp	.-2      	; 0x11b2 <__stop_program>
